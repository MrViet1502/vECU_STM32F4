
SW_STM32F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003218  08003218  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003220  08003220  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d5b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000183b  00000000  00000000  00028dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005a8  00000000  00000000  0002ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f41e  00000000  00000000  0002b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000767e  00000000  00000000  0004a65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8857  00000000  00000000  00051cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010a533  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000206c  00000000  00000000  0010a588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080030f4 	.word	0x080030f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080030f4 	.word	0x080030f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
#endif /* __GNUC__ */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    HAL_USART_Transmit(&husart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000576:	2201      	movs	r2, #1
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057a:	f001 fa7e 	bl	8001a7a <HAL_USART_Transmit>
    return ch;
 800057e:	687b      	ldr	r3, [r7, #4]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000e0 	.word	0x200000e0

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fad2 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f836 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8ee 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_Init();
 800059c:	f000 f890 	bl	80006c0 <MX_USART2_Init>
  MX_USART3_Init();
 80005a0:	f000 f8bc 	bl	800071c <MX_USART3_Init>


  printf("\r\nUART printf example initialized.\r\n");
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0x58>)
 80005a6:	f001 fe5f 	bl	8002268 <puts>
      printf("System running...\r\n");
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <main+0x5c>)
 80005ac:	f001 fe5c 	bl	8002268 <puts>
  /* USER CODE BEGIN 2 */
  HAL_USART_Receive_IT(&husart3,&receive_data,1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	490e      	ldr	r1, [pc, #56]	; (80005ec <main+0x60>)
 80005b4:	480e      	ldr	r0, [pc, #56]	; (80005f0 <main+0x64>)
 80005b6:	f001 faf0 	bl	8001b9a <HAL_USART_Receive_IT>
  	HAL_USART_Receive_IT(&husart2,&echo_receive_data,1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	490d      	ldr	r1, [pc, #52]	; (80005f4 <main+0x68>)
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x6c>)
 80005c0:	f001 faeb 	bl	8001b9a <HAL_USART_Receive_IT>

    /* USER CODE END WHILE */
	 // HAL_USART_Transmit_IT(&husart2,&send_data,1);
	  		//send_data++;
	  //HAL_USART_Transmit(&husart2, (uint8_t*)msg, sizeof(msg) - 1, 1000);
	  printf("Hello from STM32F3! Counter: %lu\r\n", HAL_GetTick() / 1000);
 80005c4:	f000 fb1e 	bl	8000c04 <HAL_GetTick>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <main+0x70>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	099b      	lsrs	r3, r3, #6
 80005d2:	4619      	mov	r1, r3
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <main+0x74>)
 80005d6:	f001 fdc1 	bl	800215c <iprintf>

	  		HAL_Delay(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 fb1d 	bl	8000c1c <HAL_Delay>
	  printf("Hello from STM32F3! Counter: %lu\r\n", HAL_GetTick() / 1000);
 80005e2:	e7ef      	b.n	80005c4 <main+0x38>
 80005e4:	0800310c 	.word	0x0800310c
 80005e8:	08003130 	.word	0x08003130
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	2000008d 	.word	0x2000008d
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	10624dd3 	.word	0x10624dd3
 8000600:	08003144 	.word	0x08003144

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fd9a 	bl	800214c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xb4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xb4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xb8>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xb8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd77 	bl	8001168 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000680:	f000 f8a2 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ffda 	bl	8001658 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006aa:	f000 f88d 	bl	80007c8 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_USART2_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_USART2_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 250000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART2_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_Init+0x50>)
 80006e4:	220c      	movs	r2, #12
 80006e6:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_Init+0x50>)
 80006fc:	f001 f97c 	bl	80019f8 <HAL_USART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 f85f 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000e0 	.word	0x200000e0
 8000714:	40004400 	.word	0x40004400
 8000718:	0003d090 	.word	0x0003d090

0800071c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_USART3_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_USART3_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 250000;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART3_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART3_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_USART3_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART3_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART3_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART3_Init+0x50>)
 8000740:	220c      	movs	r2, #12
 8000742:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART3_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART3_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART3_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART3_Init+0x50>)
 8000758:	f001 f94e 	bl	80019f8 <HAL_USART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART3_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 f831 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000009c 	.word	0x2000009c
 8000770:	40004800 	.word	0x40004800
 8000774:	0003d090 	.word	0x0003d090

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_GPIO_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_GPIO_Init+0x4c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_GPIO_Init+0x4c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_GPIO_Init+0x4c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <MX_GPIO_Init+0x4c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_GPIO_Init+0x4c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x4>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a32      	ldr	r2, [pc, #200]	; (8000908 <HAL_USART_MspInit+0xe8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12c      	bne.n	800089c <HAL_USART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */
  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <HAL_USART_MspInit+0xec>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a30      	ldr	r2, [pc, #192]	; (800090c <HAL_USART_MspInit+0xec>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <HAL_USART_MspInit+0xec>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b2a      	ldr	r3, [pc, #168]	; (800090c <HAL_USART_MspInit+0xec>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a29      	ldr	r2, [pc, #164]	; (800090c <HAL_USART_MspInit+0xec>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <HAL_USART_MspInit+0xec>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800087a:	231c      	movs	r3, #28
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088a:	2307      	movs	r3, #7
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	481e      	ldr	r0, [pc, #120]	; (8000910 <HAL_USART_MspInit+0xf0>)
 8000896:	f000 facb 	bl	8000e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */
  /* USER CODE END USART3_MspInit 1 */
  }

}
 800089a:	e031      	b.n	8000900 <HAL_USART_MspInit+0xe0>
  else if(husart->Instance==USART3)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <HAL_USART_MspInit+0xf4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12c      	bne.n	8000900 <HAL_USART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_USART_MspInit+0xec>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_USART_MspInit+0xec>)
 80008b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_USART_MspInit+0xec>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_USART_MspInit+0xec>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_USART_MspInit+0xec>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_USART_MspInit+0xec>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008f0:	2307      	movs	r3, #7
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <HAL_USART_MspInit+0xf8>)
 80008fc:	f000 fa98 	bl	8000e30 <HAL_GPIO_Init>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40004400 	.word	0x40004400
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000
 8000914:	40004800 	.word	0x40004800
 8000918:	40020400 	.word	0x40020400

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f934 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00a      	b.n	80009a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800098a:	f3af 8000 	nop.w
 800098e:	4601      	mov	r1, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf0      	blt.n	800098a <_read+0x12>
	}

return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e009      	b.n	80009d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fdcb 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf1      	blt.n	80009c4 <_write+0x12>
	}
	return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f001 fb38 	bl	80020f8 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20020000 	.word	0x20020000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000090 	.word	0x20000090
 8000abc:	20000138 	.word	0x20000138

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aea:	490e      	ldr	r1, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b00:	4c0b      	ldr	r4, [pc, #44]	; (8000b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b0e:	f7ff ffd7 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f001 faf7 	bl	8002104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd39 	bl	800058c <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b28:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 8000b2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b30:	20000138 	.word	0x20000138

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f931 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe30 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f93b 	bl	8000e16 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f911 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000124 	.word	0x20000124

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000124 	.word	0x20000124

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5c 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b60      	ldr	r3, [pc, #384]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5f      	ldr	r2, [pc, #380]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	; (8001140 <HAL_GPIO_Init+0x310>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x314>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x318>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_GPIO_Init+0x31c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x320>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x324>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x328>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x32c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x310>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_GPIO_Init+0x334>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a32      	ldr	r2, [pc, #200]	; (8001164 <HAL_GPIO_Init+0x334>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_GPIO_Init+0x334>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e264      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d075      	beq.n	8001272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001186:	4ba3      	ldr	r3, [pc, #652]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b04      	cmp	r3, #4
 8001190:	d00c      	beq.n	80011ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001192:	4ba0      	ldr	r3, [pc, #640]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d112      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	4b9d      	ldr	r3, [pc, #628]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011aa:	d10b      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	4b99      	ldr	r3, [pc, #612]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d05b      	beq.n	8001270 <HAL_RCC_OscConfig+0x108>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d157      	bne.n	8001270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e23f      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011cc:	d106      	bne.n	80011dc <HAL_RCC_OscConfig+0x74>
 80011ce:	4b91      	ldr	r3, [pc, #580]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a90      	ldr	r2, [pc, #576]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e01d      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x98>
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a8a      	ldr	r2, [pc, #552]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a87      	ldr	r2, [pc, #540]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 8001200:	4b84      	ldr	r3, [pc, #528]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a83      	ldr	r2, [pc, #524]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a80      	ldr	r2, [pc, #512]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d013      	beq.n	8001248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fcf0 	bl	8000c04 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fcec 	bl	8000c04 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e204      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0xc0>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fcdc 	bl	8000c04 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fcd8 	bl	8000c04 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e1f0      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0xe8>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d063      	beq.n	8001346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127e:	4b65      	ldr	r3, [pc, #404]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128a:	4b62      	ldr	r3, [pc, #392]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d11c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d116      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e1c4      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b56      	ldr	r3, [pc, #344]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4952      	ldr	r1, [pc, #328]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	e03a      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d020      	beq.n	800131a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d8:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <HAL_RCC_OscConfig+0x2b0>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff fc91 	bl	8000c04 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fc8d 	bl	8000c04 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1a5      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4940      	ldr	r1, [pc, #256]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_OscConfig+0x2b0>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fc70 	bl	8000c04 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001328:	f7ff fc6c 	bl	8000c04 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e184      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d030      	beq.n	80013b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d016      	beq.n	8001388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x2b4>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff fc50 	bl	8000c04 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fc4c 	bl	8000c04 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e164      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x200>
 8001386:	e015      	b.n	80013b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_OscConfig+0x2b4>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fc39 	bl	8000c04 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff fc35 	bl	8000c04 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e14d      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a0 	beq.w	8001502 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10f      	bne.n	80013f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x2b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d121      	bne.n	8001442 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_RCC_OscConfig+0x2b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_RCC_OscConfig+0x2b8>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140a:	f7ff fbfb 	bl	8000c04 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	e011      	b.n	8001436 <HAL_RCC_OscConfig+0x2ce>
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	42470000 	.word	0x42470000
 800141c:	42470e80 	.word	0x42470e80
 8001420:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001424:	f7ff fbee 	bl	8000c04 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e106      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b85      	ldr	r3, [pc, #532]	; (800164c <HAL_RCC_OscConfig+0x4e4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <HAL_RCC_OscConfig+0x2f0>
 800144a:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a80      	ldr	r2, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x32a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x312>
 8001460:	4b7b      	ldr	r3, [pc, #492]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a7a      	ldr	r2, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	4b78      	ldr	r3, [pc, #480]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a77      	ldr	r2, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x32a>
 800147a:	4b75      	ldr	r3, [pc, #468]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a74      	ldr	r2, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	4b72      	ldr	r3, [pc, #456]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a71      	ldr	r2, [pc, #452]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149a:	f7ff fbb3 	bl	8000c04 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff fbaf 	bl	8000c04 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0c5      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ee      	beq.n	80014a2 <HAL_RCC_OscConfig+0x33a>
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb9d 	bl	8000c04 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fb99 	bl	8000c04 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0af      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	4b5a      	ldr	r3, [pc, #360]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d105      	bne.n	8001502 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f6:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a55      	ldr	r2, [pc, #340]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 809b 	beq.w	8001642 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d05c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d141      	bne.n	80015a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <HAL_RCC_OscConfig+0x4ec>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb6d 	bl	8000c04 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fb69 	bl	8000c04 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e081      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001540:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69da      	ldr	r2, [r3, #28]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	019b      	lsls	r3, r3, #6
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	3b01      	subs	r3, #1
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	4937      	ldr	r1, [pc, #220]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <HAL_RCC_OscConfig+0x4ec>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fb42 	bl	8000c04 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fb3e 	bl	8000c04 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e056      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x41c>
 80015a2:	e04e      	b.n	8001642 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_RCC_OscConfig+0x4ec>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fb2b 	bl	8000c04 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fb27 	bl	8000c04 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e03f      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x44a>
 80015d0:	e037      	b.n	8001642 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e032      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d028      	beq.n	800163e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d121      	bne.n	800163e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d11a      	bne.n	800163e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800160e:	4013      	ands	r3, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001614:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001616:	4293      	cmp	r3, r2
 8001618:	d111      	bne.n	800163e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	3b01      	subs	r3, #1
 8001628:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d107      	bne.n	800163e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40007000 	.word	0x40007000
 8001650:	40023800 	.word	0x40023800
 8001654:	42470060 	.word	0x42470060

08001658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0cc      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d90c      	bls.n	8001694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0b8      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	494d      	ldr	r1, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d044      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d119      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d003      	beq.n	8001716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	2b03      	cmp	r3, #3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e06f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e067      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4934      	ldr	r1, [pc, #208]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff fa5c 	bl	8000c04 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fa58 	bl	8000c04 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d20c      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e032      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4916      	ldr	r1, [pc, #88]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 f821 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	490a      	ldr	r1, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	5ccb      	ldrb	r3, [r1, r3]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f9bc 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00
 8001814:	40023800 	.word	0x40023800
 8001818:	08003168 	.word	0x08003168
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800182a:	2100      	movs	r1, #0
 800182c:	6079      	str	r1, [r7, #4]
 800182e:	2100      	movs	r1, #0
 8001830:	60f9      	str	r1, [r7, #12]
 8001832:	2100      	movs	r1, #0
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001836:	2100      	movs	r1, #0
 8001838:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183a:	4952      	ldr	r1, [pc, #328]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800183c:	6889      	ldr	r1, [r1, #8]
 800183e:	f001 010c 	and.w	r1, r1, #12
 8001842:	2908      	cmp	r1, #8
 8001844:	d00d      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0x3e>
 8001846:	2908      	cmp	r1, #8
 8001848:	f200 8094 	bhi.w	8001974 <HAL_RCC_GetSysClockFreq+0x150>
 800184c:	2900      	cmp	r1, #0
 800184e:	d002      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x32>
 8001850:	2904      	cmp	r1, #4
 8001852:	d003      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x38>
 8001854:	e08e      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001856:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_GetSysClockFreq+0x164>)
 8001858:	60bb      	str	r3, [r7, #8]
       break;
 800185a:	e08e      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_GetSysClockFreq+0x168>)
 800185e:	60bb      	str	r3, [r7, #8]
      break;
 8001860:	e08b      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001862:	4948      	ldr	r1, [pc, #288]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 8001864:	6849      	ldr	r1, [r1, #4]
 8001866:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800186a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186c:	4945      	ldr	r1, [pc, #276]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800186e:	6849      	ldr	r1, [r1, #4]
 8001870:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001874:	2900      	cmp	r1, #0
 8001876:	d024      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001878:	4942      	ldr	r1, [pc, #264]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800187a:	6849      	ldr	r1, [r1, #4]
 800187c:	0989      	lsrs	r1, r1, #6
 800187e:	4608      	mov	r0, r1
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001888:	f04f 0500 	mov.w	r5, #0
 800188c:	ea00 0204 	and.w	r2, r0, r4
 8001890:	ea01 0305 	and.w	r3, r1, r5
 8001894:	493d      	ldr	r1, [pc, #244]	; (800198c <HAL_RCC_GetSysClockFreq+0x168>)
 8001896:	fb01 f003 	mul.w	r0, r1, r3
 800189a:	2100      	movs	r1, #0
 800189c:	fb01 f102 	mul.w	r1, r1, r2
 80018a0:	1844      	adds	r4, r0, r1
 80018a2:	493a      	ldr	r1, [pc, #232]	; (800198c <HAL_RCC_GetSysClockFreq+0x168>)
 80018a4:	fba2 0101 	umull	r0, r1, r2, r1
 80018a8:	1863      	adds	r3, r4, r1
 80018aa:	4619      	mov	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f7fe fcdc 	bl	8000270 <__aeabi_uldivmod>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4613      	mov	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e04a      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	461a      	mov	r2, r3
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	ea02 0400 	and.w	r4, r2, r0
 80018da:	ea03 0501 	and.w	r5, r3, r1
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	014b      	lsls	r3, r1, #5
 80018ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018f0:	0142      	lsls	r2, r0, #5
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	1b00      	subs	r0, r0, r4
 80018f8:	eb61 0105 	sbc.w	r1, r1, r5
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	018b      	lsls	r3, r1, #6
 8001906:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800190a:	0182      	lsls	r2, r0, #6
 800190c:	1a12      	subs	r2, r2, r0
 800190e:	eb63 0301 	sbc.w	r3, r3, r1
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	00d9      	lsls	r1, r3, #3
 800191c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001920:	00d0      	lsls	r0, r2, #3
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	1912      	adds	r2, r2, r4
 8001928:	eb45 0303 	adc.w	r3, r5, r3
 800192c:	f04f 0000 	mov.w	r0, #0
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	0299      	lsls	r1, r3, #10
 8001936:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800193a:	0290      	lsls	r0, r2, #10
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f7fe fc90 	bl	8000270 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	3301      	adds	r3, #1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	60bb      	str	r3, [r7, #8]
      break;
 8001972:	e002      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_RCC_GetSysClockFreq+0x164>)
 8001976:	60bb      	str	r3, [r7, #8]
      break;
 8001978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197a:	68bb      	ldr	r3, [r7, #8]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400
 800198c:	017d7840 	.word	0x017d7840

08001990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019ac:	f7ff fff0 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08003178 	.word	0x08003178

080019d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019d4:	f7ff ffdc 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0b5b      	lsrs	r3, r3, #13
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08003178 	.word	0x08003178

080019f8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e033      	b.n	8001a72 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe fefe 	bl	8000820 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f95d 	bl	8001cec <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a50:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a60:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b08a      	sub	sp, #40	; 0x28
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d17c      	bne.n	8001b90 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_USART_Transmit+0x28>
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e075      	b.n	8001b92 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_USART_Transmit+0x3a>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e06e      	b.n	8001b92 <HAL_USART_Transmit+0x118>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2212      	movs	r2, #18
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aca:	f7ff f89b 	bl	8000c04 <HAL_GetTick>
 8001ace:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae4:	d108      	bne.n	8001af8 <HAL_USART_Transmit+0x7e>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d104      	bne.n	8001af8 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	e003      	b.n	8001b00 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8001b00:	e02a      	b.n	8001b58 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f896 	bl	8001c3e <USART_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e03a      	b.n	8001b92 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10b      	bne.n	8001b3a <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b30:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3302      	adds	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	e007      	b.n	8001b4a <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3301      	adds	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1cf      	bne.n	8001b02 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f866 	bl	8001c3e <USART_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e00a      	b.n	8001b92 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_USART_Receive_IT>:
  * @param  pRxData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size    Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d13d      	bne.n	8001c30 <HAL_USART_Receive_IT+0x96>
  {
    if ((pRxData == NULL) || (Size == 0))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_USART_Receive_IT+0x26>
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_USART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e036      	b.n	8001c32 <HAL_USART_Receive_IT+0x98>
    }
    /* Process Locked */
    __HAL_LOCK(husart);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_USART_Receive_IT+0x38>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e02f      	b.n	8001c32 <HAL_USART_Receive_IT+0x98>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pRxBuffPtr = pRxData;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
    husart->RxXferSize = Size;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	88fa      	ldrh	r2, [r7, #6]
 8001be4:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	865a      	strh	r2, [r3, #50]	; 0x32

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_RX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2222      	movs	r2, #34	; 0x22
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the USART Parity Error and Data Register not empty Interrupts */
    SET_BIT(husart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001c10:	60da      	str	r2, [r3, #12]

    /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	615a      	str	r2, [r3, #20]

    /* Send dummy byte in order to generate the clock for the slave to send data */
    husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001c2a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_USART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
  }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001c4e:	e038      	b.n	8001cc2 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c56:	d034      	beq.n	8001cc2 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <USART_WaitOnFlagUntilTimeout+0x30>
 8001c5e:	f7fe ffd1 	bl	8000c04 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d229      	bcs.n	8001cc2 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c7c:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0220 	bic.w	r2, r2, #32
 8001c8c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c9c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e00f      	b.n	8001ce2 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d0b7      	beq.n	8001c50 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf0:	b0a5      	sub	sp, #148	; 0x94
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  uint32_t tmpreg = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f021 030c 	bic.w	r3, r1, #12
 8001d10:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8001d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d2e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d34:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001d36:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d44:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001d46:	431a      	orrs	r2, r3
 8001d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8001d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d60:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8001d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d76:	f023 030c 	bic.w	r3, r3, #12
 8001d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8001d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8001da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dac:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8001dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6959      	ldr	r1, [r3, #20]
 8001db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8001dc0:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8001dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4bc8      	ldr	r3, [pc, #800]	; (80020ec <USART_SetConfig+0x400>)
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d006      	beq.n	8001ddc <USART_SetConfig+0xf0>
 8001dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4bc6      	ldr	r3, [pc, #792]	; (80020f0 <USART_SetConfig+0x404>)
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	f040 80c1 	bne.w	8001f5e <USART_SetConfig+0x272>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ddc:	f7ff fdf8 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 8001de0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001de8:	461c      	mov	r4, r3
 8001dea:	f04f 0500 	mov.w	r5, #0
 8001dee:	4622      	mov	r2, r4
 8001df0:	462b      	mov	r3, r5
 8001df2:	1891      	adds	r1, r2, r2
 8001df4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001df6:	415b      	adcs	r3, r3
 8001df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dfe:	1912      	adds	r2, r2, r4
 8001e00:	eb45 0303 	adc.w	r3, r5, r3
 8001e04:	f04f 0000 	mov.w	r0, #0
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	00d9      	lsls	r1, r3, #3
 8001e0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e12:	00d0      	lsls	r0, r2, #3
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	eb12 0a04 	adds.w	sl, r2, r4
 8001e1c:	eb43 0b05 	adc.w	fp, r3, r5
 8001e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	1891      	adds	r1, r2, r2
 8001e2e:	6539      	str	r1, [r7, #80]	; 0x50
 8001e30:	415b      	adcs	r3, r3
 8001e32:	657b      	str	r3, [r7, #84]	; 0x54
 8001e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e38:	4650      	mov	r0, sl
 8001e3a:	4659      	mov	r1, fp
 8001e3c:	f7fe fa18 	bl	8000270 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4bab      	ldr	r3, [pc, #684]	; (80020f4 <USART_SetConfig+0x408>)
 8001e46:	fba3 2302 	umull	r2, r3, r3, r2
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	011e      	lsls	r6, r3, #4
 8001e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e52:	461c      	mov	r4, r3
 8001e54:	f04f 0500 	mov.w	r5, #0
 8001e58:	4622      	mov	r2, r4
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	1891      	adds	r1, r2, r2
 8001e5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e60:	415b      	adcs	r3, r3
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e68:	1912      	adds	r2, r2, r4
 8001e6a:	eb45 0303 	adc.w	r3, r5, r3
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	00d9      	lsls	r1, r3, #3
 8001e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e7c:	00d0      	lsls	r0, r2, #3
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	1911      	adds	r1, r2, r4
 8001e84:	67b9      	str	r1, [r7, #120]	; 0x78
 8001e86:	416b      	adcs	r3, r5
 8001e88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	461a      	mov	r2, r3
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	1891      	adds	r1, r2, r2
 8001e98:	6439      	str	r1, [r7, #64]	; 0x40
 8001e9a:	415b      	adcs	r3, r3
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ea2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ea6:	f7fe f9e3 	bl	8000270 <__aeabi_uldivmod>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4b91      	ldr	r3, [pc, #580]	; (80020f4 <USART_SetConfig+0x408>)
 8001eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	2164      	movs	r1, #100	; 0x64
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	3332      	adds	r3, #50	; 0x32
 8001ec2:	4a8c      	ldr	r2, [pc, #560]	; (80020f4 <USART_SetConfig+0x408>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ed0:	441e      	add	r6, r3
 8001ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	1894      	adds	r4, r2, r2
 8001ee2:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ee4:	415b      	adcs	r3, r3
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001eec:	1812      	adds	r2, r2, r0
 8001eee:	eb41 0303 	adc.w	r3, r1, r3
 8001ef2:	f04f 0400 	mov.w	r4, #0
 8001ef6:	f04f 0500 	mov.w	r5, #0
 8001efa:	00dd      	lsls	r5, r3, #3
 8001efc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f00:	00d4      	lsls	r4, r2, #3
 8001f02:	4622      	mov	r2, r4
 8001f04:	462b      	mov	r3, r5
 8001f06:	1814      	adds	r4, r2, r0
 8001f08:	673c      	str	r4, [r7, #112]	; 0x70
 8001f0a:	414b      	adcs	r3, r1
 8001f0c:	677b      	str	r3, [r7, #116]	; 0x74
 8001f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	461a      	mov	r2, r3
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	1891      	adds	r1, r2, r2
 8001f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8001f1e:	415b      	adcs	r3, r3
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
 8001f22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f26:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001f2a:	f7fe f9a1 	bl	8000270 <__aeabi_uldivmod>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4b70      	ldr	r3, [pc, #448]	; (80020f4 <USART_SetConfig+0x408>)
 8001f34:	fba3 1302 	umull	r1, r3, r3, r2
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	2164      	movs	r1, #100	; 0x64
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	3332      	adds	r3, #50	; 0x32
 8001f46:	4a6b      	ldr	r2, [pc, #428]	; (80020f4 <USART_SetConfig+0x408>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	f003 0207 	and.w	r2, r3, #7
 8001f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4432      	add	r2, r6
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e0c0      	b.n	80020e0 <USART_SetConfig+0x3f4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f5e:	f7ff fd23 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 8001f62:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f6a:	461c      	mov	r4, r3
 8001f6c:	f04f 0500 	mov.w	r5, #0
 8001f70:	4622      	mov	r2, r4
 8001f72:	462b      	mov	r3, r5
 8001f74:	1891      	adds	r1, r2, r2
 8001f76:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f78:	415b      	adcs	r3, r3
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f80:	1912      	adds	r2, r2, r4
 8001f82:	eb45 0303 	adc.w	r3, r5, r3
 8001f86:	f04f 0000 	mov.w	r0, #0
 8001f8a:	f04f 0100 	mov.w	r1, #0
 8001f8e:	00d9      	lsls	r1, r3, #3
 8001f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f94:	00d0      	lsls	r0, r2, #3
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	eb12 0804 	adds.w	r8, r2, r4
 8001f9e:	eb43 0905 	adc.w	r9, r3, r5
 8001fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	1891      	adds	r1, r2, r2
 8001fb0:	6239      	str	r1, [r7, #32]
 8001fb2:	415b      	adcs	r3, r3
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fba:	4640      	mov	r0, r8
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	f7fe f957 	bl	8000270 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <USART_SetConfig+0x408>)
 8001fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	011e      	lsls	r6, r3, #4
 8001fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd4:	461c      	mov	r4, r3
 8001fd6:	f04f 0500 	mov.w	r5, #0
 8001fda:	4622      	mov	r2, r4
 8001fdc:	462b      	mov	r3, r5
 8001fde:	1891      	adds	r1, r2, r2
 8001fe0:	61b9      	str	r1, [r7, #24]
 8001fe2:	415b      	adcs	r3, r3
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fea:	1912      	adds	r2, r2, r4
 8001fec:	eb45 0303 	adc.w	r3, r5, r3
 8001ff0:	f04f 0000 	mov.w	r0, #0
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	00d9      	lsls	r1, r3, #3
 8001ffa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ffe:	00d0      	lsls	r0, r2, #3
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	1911      	adds	r1, r2, r4
 8002006:	66b9      	str	r1, [r7, #104]	; 0x68
 8002008:	416b      	adcs	r3, r5
 800200a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800200c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	1891      	adds	r1, r2, r2
 800201a:	6139      	str	r1, [r7, #16]
 800201c:	415b      	adcs	r3, r3
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002028:	f7fe f922 	bl	8000270 <__aeabi_uldivmod>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <USART_SetConfig+0x408>)
 8002032:	fba3 1302 	umull	r1, r3, r3, r2
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2164      	movs	r1, #100	; 0x64
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	3332      	adds	r3, #50	; 0x32
 8002044:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <USART_SetConfig+0x408>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002052:	441e      	add	r6, r3
 8002054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002058:	4618      	mov	r0, r3
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	1894      	adds	r4, r2, r2
 8002064:	60bc      	str	r4, [r7, #8]
 8002066:	415b      	adcs	r3, r3
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800206e:	1812      	adds	r2, r2, r0
 8002070:	eb41 0303 	adc.w	r3, r1, r3
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	f04f 0500 	mov.w	r5, #0
 800207c:	00dd      	lsls	r5, r3, #3
 800207e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002082:	00d4      	lsls	r4, r2, #3
 8002084:	4622      	mov	r2, r4
 8002086:	462b      	mov	r3, r5
 8002088:	1814      	adds	r4, r2, r0
 800208a:	663c      	str	r4, [r7, #96]	; 0x60
 800208c:	414b      	adcs	r3, r1
 800208e:	667b      	str	r3, [r7, #100]	; 0x64
 8002090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	1891      	adds	r1, r2, r2
 800209e:	6039      	str	r1, [r7, #0]
 80020a0:	415b      	adcs	r3, r3
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80020ac:	f7fe f8e0 	bl	8000270 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <USART_SetConfig+0x408>)
 80020b6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2164      	movs	r1, #100	; 0x64
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	3332      	adds	r3, #50	; 0x32
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <USART_SetConfig+0x408>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4432      	add	r2, r6
 80020dc:	609a      	str	r2, [r3, #8]
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3794      	adds	r7, #148	; 0x94
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ea:	bf00      	nop
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40011400 	.word	0x40011400
 80020f4:	51eb851f 	.word	0x51eb851f

080020f8 <__errno>:
 80020f8:	4b01      	ldr	r3, [pc, #4]	; (8002100 <__errno+0x8>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2000000c 	.word	0x2000000c

08002104 <__libc_init_array>:
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	4d0d      	ldr	r5, [pc, #52]	; (800213c <__libc_init_array+0x38>)
 8002108:	4c0d      	ldr	r4, [pc, #52]	; (8002140 <__libc_init_array+0x3c>)
 800210a:	1b64      	subs	r4, r4, r5
 800210c:	10a4      	asrs	r4, r4, #2
 800210e:	2600      	movs	r6, #0
 8002110:	42a6      	cmp	r6, r4
 8002112:	d109      	bne.n	8002128 <__libc_init_array+0x24>
 8002114:	4d0b      	ldr	r5, [pc, #44]	; (8002144 <__libc_init_array+0x40>)
 8002116:	4c0c      	ldr	r4, [pc, #48]	; (8002148 <__libc_init_array+0x44>)
 8002118:	f000 ffec 	bl	80030f4 <_init>
 800211c:	1b64      	subs	r4, r4, r5
 800211e:	10a4      	asrs	r4, r4, #2
 8002120:	2600      	movs	r6, #0
 8002122:	42a6      	cmp	r6, r4
 8002124:	d105      	bne.n	8002132 <__libc_init_array+0x2e>
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	f855 3b04 	ldr.w	r3, [r5], #4
 800212c:	4798      	blx	r3
 800212e:	3601      	adds	r6, #1
 8002130:	e7ee      	b.n	8002110 <__libc_init_array+0xc>
 8002132:	f855 3b04 	ldr.w	r3, [r5], #4
 8002136:	4798      	blx	r3
 8002138:	3601      	adds	r6, #1
 800213a:	e7f2      	b.n	8002122 <__libc_init_array+0x1e>
 800213c:	08003220 	.word	0x08003220
 8002140:	08003220 	.word	0x08003220
 8002144:	08003220 	.word	0x08003220
 8002148:	08003224 	.word	0x08003224

0800214c <memset>:
 800214c:	4402      	add	r2, r0
 800214e:	4603      	mov	r3, r0
 8002150:	4293      	cmp	r3, r2
 8002152:	d100      	bne.n	8002156 <memset+0xa>
 8002154:	4770      	bx	lr
 8002156:	f803 1b01 	strb.w	r1, [r3], #1
 800215a:	e7f9      	b.n	8002150 <memset+0x4>

0800215c <iprintf>:
 800215c:	b40f      	push	{r0, r1, r2, r3}
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <iprintf+0x2c>)
 8002160:	b513      	push	{r0, r1, r4, lr}
 8002162:	681c      	ldr	r4, [r3, #0]
 8002164:	b124      	cbz	r4, 8002170 <iprintf+0x14>
 8002166:	69a3      	ldr	r3, [r4, #24]
 8002168:	b913      	cbnz	r3, 8002170 <iprintf+0x14>
 800216a:	4620      	mov	r0, r4
 800216c:	f000 fa5e 	bl	800262c <__sinit>
 8002170:	ab05      	add	r3, sp, #20
 8002172:	9a04      	ldr	r2, [sp, #16]
 8002174:	68a1      	ldr	r1, [r4, #8]
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	4620      	mov	r0, r4
 800217a:	f000 fc2f 	bl	80029dc <_vfiprintf_r>
 800217e:	b002      	add	sp, #8
 8002180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002184:	b004      	add	sp, #16
 8002186:	4770      	bx	lr
 8002188:	2000000c 	.word	0x2000000c

0800218c <_puts_r>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	460e      	mov	r6, r1
 8002190:	4605      	mov	r5, r0
 8002192:	b118      	cbz	r0, 800219c <_puts_r+0x10>
 8002194:	6983      	ldr	r3, [r0, #24]
 8002196:	b90b      	cbnz	r3, 800219c <_puts_r+0x10>
 8002198:	f000 fa48 	bl	800262c <__sinit>
 800219c:	69ab      	ldr	r3, [r5, #24]
 800219e:	68ac      	ldr	r4, [r5, #8]
 80021a0:	b913      	cbnz	r3, 80021a8 <_puts_r+0x1c>
 80021a2:	4628      	mov	r0, r5
 80021a4:	f000 fa42 	bl	800262c <__sinit>
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <_puts_r+0xd0>)
 80021aa:	429c      	cmp	r4, r3
 80021ac:	d120      	bne.n	80021f0 <_puts_r+0x64>
 80021ae:	686c      	ldr	r4, [r5, #4]
 80021b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021b2:	07db      	lsls	r3, r3, #31
 80021b4:	d405      	bmi.n	80021c2 <_puts_r+0x36>
 80021b6:	89a3      	ldrh	r3, [r4, #12]
 80021b8:	0598      	lsls	r0, r3, #22
 80021ba:	d402      	bmi.n	80021c2 <_puts_r+0x36>
 80021bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021be:	f000 fad3 	bl	8002768 <__retarget_lock_acquire_recursive>
 80021c2:	89a3      	ldrh	r3, [r4, #12]
 80021c4:	0719      	lsls	r1, r3, #28
 80021c6:	d51d      	bpl.n	8002204 <_puts_r+0x78>
 80021c8:	6923      	ldr	r3, [r4, #16]
 80021ca:	b1db      	cbz	r3, 8002204 <_puts_r+0x78>
 80021cc:	3e01      	subs	r6, #1
 80021ce:	68a3      	ldr	r3, [r4, #8]
 80021d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60a3      	str	r3, [r4, #8]
 80021d8:	bb39      	cbnz	r1, 800222a <_puts_r+0x9e>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da38      	bge.n	8002250 <_puts_r+0xc4>
 80021de:	4622      	mov	r2, r4
 80021e0:	210a      	movs	r1, #10
 80021e2:	4628      	mov	r0, r5
 80021e4:	f000 f848 	bl	8002278 <__swbuf_r>
 80021e8:	3001      	adds	r0, #1
 80021ea:	d011      	beq.n	8002210 <_puts_r+0x84>
 80021ec:	250a      	movs	r5, #10
 80021ee:	e011      	b.n	8002214 <_puts_r+0x88>
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <_puts_r+0xd4>)
 80021f2:	429c      	cmp	r4, r3
 80021f4:	d101      	bne.n	80021fa <_puts_r+0x6e>
 80021f6:	68ac      	ldr	r4, [r5, #8]
 80021f8:	e7da      	b.n	80021b0 <_puts_r+0x24>
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <_puts_r+0xd8>)
 80021fc:	429c      	cmp	r4, r3
 80021fe:	bf08      	it	eq
 8002200:	68ec      	ldreq	r4, [r5, #12]
 8002202:	e7d5      	b.n	80021b0 <_puts_r+0x24>
 8002204:	4621      	mov	r1, r4
 8002206:	4628      	mov	r0, r5
 8002208:	f000 f888 	bl	800231c <__swsetup_r>
 800220c:	2800      	cmp	r0, #0
 800220e:	d0dd      	beq.n	80021cc <_puts_r+0x40>
 8002210:	f04f 35ff 	mov.w	r5, #4294967295
 8002214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002216:	07da      	lsls	r2, r3, #31
 8002218:	d405      	bmi.n	8002226 <_puts_r+0x9a>
 800221a:	89a3      	ldrh	r3, [r4, #12]
 800221c:	059b      	lsls	r3, r3, #22
 800221e:	d402      	bmi.n	8002226 <_puts_r+0x9a>
 8002220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002222:	f000 faa2 	bl	800276a <__retarget_lock_release_recursive>
 8002226:	4628      	mov	r0, r5
 8002228:	bd70      	pop	{r4, r5, r6, pc}
 800222a:	2b00      	cmp	r3, #0
 800222c:	da04      	bge.n	8002238 <_puts_r+0xac>
 800222e:	69a2      	ldr	r2, [r4, #24]
 8002230:	429a      	cmp	r2, r3
 8002232:	dc06      	bgt.n	8002242 <_puts_r+0xb6>
 8002234:	290a      	cmp	r1, #10
 8002236:	d004      	beq.n	8002242 <_puts_r+0xb6>
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	6022      	str	r2, [r4, #0]
 800223e:	7019      	strb	r1, [r3, #0]
 8002240:	e7c5      	b.n	80021ce <_puts_r+0x42>
 8002242:	4622      	mov	r2, r4
 8002244:	4628      	mov	r0, r5
 8002246:	f000 f817 	bl	8002278 <__swbuf_r>
 800224a:	3001      	adds	r0, #1
 800224c:	d1bf      	bne.n	80021ce <_puts_r+0x42>
 800224e:	e7df      	b.n	8002210 <_puts_r+0x84>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	250a      	movs	r5, #10
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	6022      	str	r2, [r4, #0]
 8002258:	701d      	strb	r5, [r3, #0]
 800225a:	e7db      	b.n	8002214 <_puts_r+0x88>
 800225c:	080031a4 	.word	0x080031a4
 8002260:	080031c4 	.word	0x080031c4
 8002264:	08003184 	.word	0x08003184

08002268 <puts>:
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <puts+0xc>)
 800226a:	4601      	mov	r1, r0
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	f7ff bf8d 	b.w	800218c <_puts_r>
 8002272:	bf00      	nop
 8002274:	2000000c 	.word	0x2000000c

08002278 <__swbuf_r>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	460e      	mov	r6, r1
 800227c:	4614      	mov	r4, r2
 800227e:	4605      	mov	r5, r0
 8002280:	b118      	cbz	r0, 800228a <__swbuf_r+0x12>
 8002282:	6983      	ldr	r3, [r0, #24]
 8002284:	b90b      	cbnz	r3, 800228a <__swbuf_r+0x12>
 8002286:	f000 f9d1 	bl	800262c <__sinit>
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <__swbuf_r+0x98>)
 800228c:	429c      	cmp	r4, r3
 800228e:	d12b      	bne.n	80022e8 <__swbuf_r+0x70>
 8002290:	686c      	ldr	r4, [r5, #4]
 8002292:	69a3      	ldr	r3, [r4, #24]
 8002294:	60a3      	str	r3, [r4, #8]
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	071a      	lsls	r2, r3, #28
 800229a:	d52f      	bpl.n	80022fc <__swbuf_r+0x84>
 800229c:	6923      	ldr	r3, [r4, #16]
 800229e:	b36b      	cbz	r3, 80022fc <__swbuf_r+0x84>
 80022a0:	6923      	ldr	r3, [r4, #16]
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	1ac0      	subs	r0, r0, r3
 80022a6:	6963      	ldr	r3, [r4, #20]
 80022a8:	b2f6      	uxtb	r6, r6
 80022aa:	4283      	cmp	r3, r0
 80022ac:	4637      	mov	r7, r6
 80022ae:	dc04      	bgt.n	80022ba <__swbuf_r+0x42>
 80022b0:	4621      	mov	r1, r4
 80022b2:	4628      	mov	r0, r5
 80022b4:	f000 f926 	bl	8002504 <_fflush_r>
 80022b8:	bb30      	cbnz	r0, 8002308 <__swbuf_r+0x90>
 80022ba:	68a3      	ldr	r3, [r4, #8]
 80022bc:	3b01      	subs	r3, #1
 80022be:	60a3      	str	r3, [r4, #8]
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	6022      	str	r2, [r4, #0]
 80022c6:	701e      	strb	r6, [r3, #0]
 80022c8:	6963      	ldr	r3, [r4, #20]
 80022ca:	3001      	adds	r0, #1
 80022cc:	4283      	cmp	r3, r0
 80022ce:	d004      	beq.n	80022da <__swbuf_r+0x62>
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	07db      	lsls	r3, r3, #31
 80022d4:	d506      	bpl.n	80022e4 <__swbuf_r+0x6c>
 80022d6:	2e0a      	cmp	r6, #10
 80022d8:	d104      	bne.n	80022e4 <__swbuf_r+0x6c>
 80022da:	4621      	mov	r1, r4
 80022dc:	4628      	mov	r0, r5
 80022de:	f000 f911 	bl	8002504 <_fflush_r>
 80022e2:	b988      	cbnz	r0, 8002308 <__swbuf_r+0x90>
 80022e4:	4638      	mov	r0, r7
 80022e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <__swbuf_r+0x9c>)
 80022ea:	429c      	cmp	r4, r3
 80022ec:	d101      	bne.n	80022f2 <__swbuf_r+0x7a>
 80022ee:	68ac      	ldr	r4, [r5, #8]
 80022f0:	e7cf      	b.n	8002292 <__swbuf_r+0x1a>
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <__swbuf_r+0xa0>)
 80022f4:	429c      	cmp	r4, r3
 80022f6:	bf08      	it	eq
 80022f8:	68ec      	ldreq	r4, [r5, #12]
 80022fa:	e7ca      	b.n	8002292 <__swbuf_r+0x1a>
 80022fc:	4621      	mov	r1, r4
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 f80c 	bl	800231c <__swsetup_r>
 8002304:	2800      	cmp	r0, #0
 8002306:	d0cb      	beq.n	80022a0 <__swbuf_r+0x28>
 8002308:	f04f 37ff 	mov.w	r7, #4294967295
 800230c:	e7ea      	b.n	80022e4 <__swbuf_r+0x6c>
 800230e:	bf00      	nop
 8002310:	080031a4 	.word	0x080031a4
 8002314:	080031c4 	.word	0x080031c4
 8002318:	08003184 	.word	0x08003184

0800231c <__swsetup_r>:
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <__swsetup_r+0xcc>)
 800231e:	b570      	push	{r4, r5, r6, lr}
 8002320:	681d      	ldr	r5, [r3, #0]
 8002322:	4606      	mov	r6, r0
 8002324:	460c      	mov	r4, r1
 8002326:	b125      	cbz	r5, 8002332 <__swsetup_r+0x16>
 8002328:	69ab      	ldr	r3, [r5, #24]
 800232a:	b913      	cbnz	r3, 8002332 <__swsetup_r+0x16>
 800232c:	4628      	mov	r0, r5
 800232e:	f000 f97d 	bl	800262c <__sinit>
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <__swsetup_r+0xd0>)
 8002334:	429c      	cmp	r4, r3
 8002336:	d10f      	bne.n	8002358 <__swsetup_r+0x3c>
 8002338:	686c      	ldr	r4, [r5, #4]
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002340:	0719      	lsls	r1, r3, #28
 8002342:	d42c      	bmi.n	800239e <__swsetup_r+0x82>
 8002344:	06dd      	lsls	r5, r3, #27
 8002346:	d411      	bmi.n	800236c <__swsetup_r+0x50>
 8002348:	2309      	movs	r3, #9
 800234a:	6033      	str	r3, [r6, #0]
 800234c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002350:	81a3      	strh	r3, [r4, #12]
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	e03e      	b.n	80023d6 <__swsetup_r+0xba>
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <__swsetup_r+0xd4>)
 800235a:	429c      	cmp	r4, r3
 800235c:	d101      	bne.n	8002362 <__swsetup_r+0x46>
 800235e:	68ac      	ldr	r4, [r5, #8]
 8002360:	e7eb      	b.n	800233a <__swsetup_r+0x1e>
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <__swsetup_r+0xd8>)
 8002364:	429c      	cmp	r4, r3
 8002366:	bf08      	it	eq
 8002368:	68ec      	ldreq	r4, [r5, #12]
 800236a:	e7e6      	b.n	800233a <__swsetup_r+0x1e>
 800236c:	0758      	lsls	r0, r3, #29
 800236e:	d512      	bpl.n	8002396 <__swsetup_r+0x7a>
 8002370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002372:	b141      	cbz	r1, 8002386 <__swsetup_r+0x6a>
 8002374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002378:	4299      	cmp	r1, r3
 800237a:	d002      	beq.n	8002382 <__swsetup_r+0x66>
 800237c:	4630      	mov	r0, r6
 800237e:	f000 fa59 	bl	8002834 <_free_r>
 8002382:	2300      	movs	r3, #0
 8002384:	6363      	str	r3, [r4, #52]	; 0x34
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	2300      	movs	r3, #0
 8002390:	6063      	str	r3, [r4, #4]
 8002392:	6923      	ldr	r3, [r4, #16]
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	6923      	ldr	r3, [r4, #16]
 80023a0:	b94b      	cbnz	r3, 80023b6 <__swsetup_r+0x9a>
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d003      	beq.n	80023b6 <__swsetup_r+0x9a>
 80023ae:	4621      	mov	r1, r4
 80023b0:	4630      	mov	r0, r6
 80023b2:	f000 f9ff 	bl	80027b4 <__smakebuf_r>
 80023b6:	89a0      	ldrh	r0, [r4, #12]
 80023b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023bc:	f010 0301 	ands.w	r3, r0, #1
 80023c0:	d00a      	beq.n	80023d8 <__swsetup_r+0xbc>
 80023c2:	2300      	movs	r3, #0
 80023c4:	60a3      	str	r3, [r4, #8]
 80023c6:	6963      	ldr	r3, [r4, #20]
 80023c8:	425b      	negs	r3, r3
 80023ca:	61a3      	str	r3, [r4, #24]
 80023cc:	6923      	ldr	r3, [r4, #16]
 80023ce:	b943      	cbnz	r3, 80023e2 <__swsetup_r+0xc6>
 80023d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023d4:	d1ba      	bne.n	800234c <__swsetup_r+0x30>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	0781      	lsls	r1, r0, #30
 80023da:	bf58      	it	pl
 80023dc:	6963      	ldrpl	r3, [r4, #20]
 80023de:	60a3      	str	r3, [r4, #8]
 80023e0:	e7f4      	b.n	80023cc <__swsetup_r+0xb0>
 80023e2:	2000      	movs	r0, #0
 80023e4:	e7f7      	b.n	80023d6 <__swsetup_r+0xba>
 80023e6:	bf00      	nop
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	080031a4 	.word	0x080031a4
 80023f0:	080031c4 	.word	0x080031c4
 80023f4:	08003184 	.word	0x08003184

080023f8 <__sflush_r>:
 80023f8:	898a      	ldrh	r2, [r1, #12]
 80023fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023fe:	4605      	mov	r5, r0
 8002400:	0710      	lsls	r0, r2, #28
 8002402:	460c      	mov	r4, r1
 8002404:	d458      	bmi.n	80024b8 <__sflush_r+0xc0>
 8002406:	684b      	ldr	r3, [r1, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	dc05      	bgt.n	8002418 <__sflush_r+0x20>
 800240c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	dc02      	bgt.n	8002418 <__sflush_r+0x20>
 8002412:	2000      	movs	r0, #0
 8002414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800241a:	2e00      	cmp	r6, #0
 800241c:	d0f9      	beq.n	8002412 <__sflush_r+0x1a>
 800241e:	2300      	movs	r3, #0
 8002420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002424:	682f      	ldr	r7, [r5, #0]
 8002426:	602b      	str	r3, [r5, #0]
 8002428:	d032      	beq.n	8002490 <__sflush_r+0x98>
 800242a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800242c:	89a3      	ldrh	r3, [r4, #12]
 800242e:	075a      	lsls	r2, r3, #29
 8002430:	d505      	bpl.n	800243e <__sflush_r+0x46>
 8002432:	6863      	ldr	r3, [r4, #4]
 8002434:	1ac0      	subs	r0, r0, r3
 8002436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002438:	b10b      	cbz	r3, 800243e <__sflush_r+0x46>
 800243a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800243c:	1ac0      	subs	r0, r0, r3
 800243e:	2300      	movs	r3, #0
 8002440:	4602      	mov	r2, r0
 8002442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002444:	6a21      	ldr	r1, [r4, #32]
 8002446:	4628      	mov	r0, r5
 8002448:	47b0      	blx	r6
 800244a:	1c43      	adds	r3, r0, #1
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	d106      	bne.n	800245e <__sflush_r+0x66>
 8002450:	6829      	ldr	r1, [r5, #0]
 8002452:	291d      	cmp	r1, #29
 8002454:	d82c      	bhi.n	80024b0 <__sflush_r+0xb8>
 8002456:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <__sflush_r+0x108>)
 8002458:	40ca      	lsrs	r2, r1
 800245a:	07d6      	lsls	r6, r2, #31
 800245c:	d528      	bpl.n	80024b0 <__sflush_r+0xb8>
 800245e:	2200      	movs	r2, #0
 8002460:	6062      	str	r2, [r4, #4]
 8002462:	04d9      	lsls	r1, r3, #19
 8002464:	6922      	ldr	r2, [r4, #16]
 8002466:	6022      	str	r2, [r4, #0]
 8002468:	d504      	bpl.n	8002474 <__sflush_r+0x7c>
 800246a:	1c42      	adds	r2, r0, #1
 800246c:	d101      	bne.n	8002472 <__sflush_r+0x7a>
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	b903      	cbnz	r3, 8002474 <__sflush_r+0x7c>
 8002472:	6560      	str	r0, [r4, #84]	; 0x54
 8002474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002476:	602f      	str	r7, [r5, #0]
 8002478:	2900      	cmp	r1, #0
 800247a:	d0ca      	beq.n	8002412 <__sflush_r+0x1a>
 800247c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002480:	4299      	cmp	r1, r3
 8002482:	d002      	beq.n	800248a <__sflush_r+0x92>
 8002484:	4628      	mov	r0, r5
 8002486:	f000 f9d5 	bl	8002834 <_free_r>
 800248a:	2000      	movs	r0, #0
 800248c:	6360      	str	r0, [r4, #52]	; 0x34
 800248e:	e7c1      	b.n	8002414 <__sflush_r+0x1c>
 8002490:	6a21      	ldr	r1, [r4, #32]
 8002492:	2301      	movs	r3, #1
 8002494:	4628      	mov	r0, r5
 8002496:	47b0      	blx	r6
 8002498:	1c41      	adds	r1, r0, #1
 800249a:	d1c7      	bne.n	800242c <__sflush_r+0x34>
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0c4      	beq.n	800242c <__sflush_r+0x34>
 80024a2:	2b1d      	cmp	r3, #29
 80024a4:	d001      	beq.n	80024aa <__sflush_r+0xb2>
 80024a6:	2b16      	cmp	r3, #22
 80024a8:	d101      	bne.n	80024ae <__sflush_r+0xb6>
 80024aa:	602f      	str	r7, [r5, #0]
 80024ac:	e7b1      	b.n	8002412 <__sflush_r+0x1a>
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b4:	81a3      	strh	r3, [r4, #12]
 80024b6:	e7ad      	b.n	8002414 <__sflush_r+0x1c>
 80024b8:	690f      	ldr	r7, [r1, #16]
 80024ba:	2f00      	cmp	r7, #0
 80024bc:	d0a9      	beq.n	8002412 <__sflush_r+0x1a>
 80024be:	0793      	lsls	r3, r2, #30
 80024c0:	680e      	ldr	r6, [r1, #0]
 80024c2:	bf08      	it	eq
 80024c4:	694b      	ldreq	r3, [r1, #20]
 80024c6:	600f      	str	r7, [r1, #0]
 80024c8:	bf18      	it	ne
 80024ca:	2300      	movne	r3, #0
 80024cc:	eba6 0807 	sub.w	r8, r6, r7
 80024d0:	608b      	str	r3, [r1, #8]
 80024d2:	f1b8 0f00 	cmp.w	r8, #0
 80024d6:	dd9c      	ble.n	8002412 <__sflush_r+0x1a>
 80024d8:	6a21      	ldr	r1, [r4, #32]
 80024da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024dc:	4643      	mov	r3, r8
 80024de:	463a      	mov	r2, r7
 80024e0:	4628      	mov	r0, r5
 80024e2:	47b0      	blx	r6
 80024e4:	2800      	cmp	r0, #0
 80024e6:	dc06      	bgt.n	80024f6 <__sflush_r+0xfe>
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ee:	81a3      	strh	r3, [r4, #12]
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	e78e      	b.n	8002414 <__sflush_r+0x1c>
 80024f6:	4407      	add	r7, r0
 80024f8:	eba8 0800 	sub.w	r8, r8, r0
 80024fc:	e7e9      	b.n	80024d2 <__sflush_r+0xda>
 80024fe:	bf00      	nop
 8002500:	20400001 	.word	0x20400001

08002504 <_fflush_r>:
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	690b      	ldr	r3, [r1, #16]
 8002508:	4605      	mov	r5, r0
 800250a:	460c      	mov	r4, r1
 800250c:	b913      	cbnz	r3, 8002514 <_fflush_r+0x10>
 800250e:	2500      	movs	r5, #0
 8002510:	4628      	mov	r0, r5
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	b118      	cbz	r0, 800251e <_fflush_r+0x1a>
 8002516:	6983      	ldr	r3, [r0, #24]
 8002518:	b90b      	cbnz	r3, 800251e <_fflush_r+0x1a>
 800251a:	f000 f887 	bl	800262c <__sinit>
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <_fflush_r+0x6c>)
 8002520:	429c      	cmp	r4, r3
 8002522:	d11b      	bne.n	800255c <_fflush_r+0x58>
 8002524:	686c      	ldr	r4, [r5, #4]
 8002526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ef      	beq.n	800250e <_fflush_r+0xa>
 800252e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002530:	07d0      	lsls	r0, r2, #31
 8002532:	d404      	bmi.n	800253e <_fflush_r+0x3a>
 8002534:	0599      	lsls	r1, r3, #22
 8002536:	d402      	bmi.n	800253e <_fflush_r+0x3a>
 8002538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800253a:	f000 f915 	bl	8002768 <__retarget_lock_acquire_recursive>
 800253e:	4628      	mov	r0, r5
 8002540:	4621      	mov	r1, r4
 8002542:	f7ff ff59 	bl	80023f8 <__sflush_r>
 8002546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002548:	07da      	lsls	r2, r3, #31
 800254a:	4605      	mov	r5, r0
 800254c:	d4e0      	bmi.n	8002510 <_fflush_r+0xc>
 800254e:	89a3      	ldrh	r3, [r4, #12]
 8002550:	059b      	lsls	r3, r3, #22
 8002552:	d4dd      	bmi.n	8002510 <_fflush_r+0xc>
 8002554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002556:	f000 f908 	bl	800276a <__retarget_lock_release_recursive>
 800255a:	e7d9      	b.n	8002510 <_fflush_r+0xc>
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <_fflush_r+0x70>)
 800255e:	429c      	cmp	r4, r3
 8002560:	d101      	bne.n	8002566 <_fflush_r+0x62>
 8002562:	68ac      	ldr	r4, [r5, #8]
 8002564:	e7df      	b.n	8002526 <_fflush_r+0x22>
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <_fflush_r+0x74>)
 8002568:	429c      	cmp	r4, r3
 800256a:	bf08      	it	eq
 800256c:	68ec      	ldreq	r4, [r5, #12]
 800256e:	e7da      	b.n	8002526 <_fflush_r+0x22>
 8002570:	080031a4 	.word	0x080031a4
 8002574:	080031c4 	.word	0x080031c4
 8002578:	08003184 	.word	0x08003184

0800257c <std>:
 800257c:	2300      	movs	r3, #0
 800257e:	b510      	push	{r4, lr}
 8002580:	4604      	mov	r4, r0
 8002582:	e9c0 3300 	strd	r3, r3, [r0]
 8002586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800258a:	6083      	str	r3, [r0, #8]
 800258c:	8181      	strh	r1, [r0, #12]
 800258e:	6643      	str	r3, [r0, #100]	; 0x64
 8002590:	81c2      	strh	r2, [r0, #14]
 8002592:	6183      	str	r3, [r0, #24]
 8002594:	4619      	mov	r1, r3
 8002596:	2208      	movs	r2, #8
 8002598:	305c      	adds	r0, #92	; 0x5c
 800259a:	f7ff fdd7 	bl	800214c <memset>
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <std+0x38>)
 80025a0:	6263      	str	r3, [r4, #36]	; 0x24
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <std+0x3c>)
 80025a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <std+0x40>)
 80025a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <std+0x44>)
 80025ac:	6224      	str	r4, [r4, #32]
 80025ae:	6323      	str	r3, [r4, #48]	; 0x30
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	bf00      	nop
 80025b4:	08002f85 	.word	0x08002f85
 80025b8:	08002fa7 	.word	0x08002fa7
 80025bc:	08002fdf 	.word	0x08002fdf
 80025c0:	08003003 	.word	0x08003003

080025c4 <_cleanup_r>:
 80025c4:	4901      	ldr	r1, [pc, #4]	; (80025cc <_cleanup_r+0x8>)
 80025c6:	f000 b8af 	b.w	8002728 <_fwalk_reent>
 80025ca:	bf00      	nop
 80025cc:	08002505 	.word	0x08002505

080025d0 <__sfmoreglue>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	1e4a      	subs	r2, r1, #1
 80025d4:	2568      	movs	r5, #104	; 0x68
 80025d6:	4355      	muls	r5, r2
 80025d8:	460e      	mov	r6, r1
 80025da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025de:	f000 f979 	bl	80028d4 <_malloc_r>
 80025e2:	4604      	mov	r4, r0
 80025e4:	b140      	cbz	r0, 80025f8 <__sfmoreglue+0x28>
 80025e6:	2100      	movs	r1, #0
 80025e8:	e9c0 1600 	strd	r1, r6, [r0]
 80025ec:	300c      	adds	r0, #12
 80025ee:	60a0      	str	r0, [r4, #8]
 80025f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025f4:	f7ff fdaa 	bl	800214c <memset>
 80025f8:	4620      	mov	r0, r4
 80025fa:	bd70      	pop	{r4, r5, r6, pc}

080025fc <__sfp_lock_acquire>:
 80025fc:	4801      	ldr	r0, [pc, #4]	; (8002604 <__sfp_lock_acquire+0x8>)
 80025fe:	f000 b8b3 	b.w	8002768 <__retarget_lock_acquire_recursive>
 8002602:	bf00      	nop
 8002604:	20000130 	.word	0x20000130

08002608 <__sfp_lock_release>:
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <__sfp_lock_release+0x8>)
 800260a:	f000 b8ae 	b.w	800276a <__retarget_lock_release_recursive>
 800260e:	bf00      	nop
 8002610:	20000130 	.word	0x20000130

08002614 <__sinit_lock_acquire>:
 8002614:	4801      	ldr	r0, [pc, #4]	; (800261c <__sinit_lock_acquire+0x8>)
 8002616:	f000 b8a7 	b.w	8002768 <__retarget_lock_acquire_recursive>
 800261a:	bf00      	nop
 800261c:	2000012b 	.word	0x2000012b

08002620 <__sinit_lock_release>:
 8002620:	4801      	ldr	r0, [pc, #4]	; (8002628 <__sinit_lock_release+0x8>)
 8002622:	f000 b8a2 	b.w	800276a <__retarget_lock_release_recursive>
 8002626:	bf00      	nop
 8002628:	2000012b 	.word	0x2000012b

0800262c <__sinit>:
 800262c:	b510      	push	{r4, lr}
 800262e:	4604      	mov	r4, r0
 8002630:	f7ff fff0 	bl	8002614 <__sinit_lock_acquire>
 8002634:	69a3      	ldr	r3, [r4, #24]
 8002636:	b11b      	cbz	r3, 8002640 <__sinit+0x14>
 8002638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800263c:	f7ff bff0 	b.w	8002620 <__sinit_lock_release>
 8002640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002644:	6523      	str	r3, [r4, #80]	; 0x50
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <__sinit+0x68>)
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <__sinit+0x6c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	62a2      	str	r2, [r4, #40]	; 0x28
 800264e:	42a3      	cmp	r3, r4
 8002650:	bf04      	itt	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	61a3      	streq	r3, [r4, #24]
 8002656:	4620      	mov	r0, r4
 8002658:	f000 f820 	bl	800269c <__sfp>
 800265c:	6060      	str	r0, [r4, #4]
 800265e:	4620      	mov	r0, r4
 8002660:	f000 f81c 	bl	800269c <__sfp>
 8002664:	60a0      	str	r0, [r4, #8]
 8002666:	4620      	mov	r0, r4
 8002668:	f000 f818 	bl	800269c <__sfp>
 800266c:	2200      	movs	r2, #0
 800266e:	60e0      	str	r0, [r4, #12]
 8002670:	2104      	movs	r1, #4
 8002672:	6860      	ldr	r0, [r4, #4]
 8002674:	f7ff ff82 	bl	800257c <std>
 8002678:	68a0      	ldr	r0, [r4, #8]
 800267a:	2201      	movs	r2, #1
 800267c:	2109      	movs	r1, #9
 800267e:	f7ff ff7d 	bl	800257c <std>
 8002682:	68e0      	ldr	r0, [r4, #12]
 8002684:	2202      	movs	r2, #2
 8002686:	2112      	movs	r1, #18
 8002688:	f7ff ff78 	bl	800257c <std>
 800268c:	2301      	movs	r3, #1
 800268e:	61a3      	str	r3, [r4, #24]
 8002690:	e7d2      	b.n	8002638 <__sinit+0xc>
 8002692:	bf00      	nop
 8002694:	08003180 	.word	0x08003180
 8002698:	080025c5 	.word	0x080025c5

0800269c <__sfp>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	4607      	mov	r7, r0
 80026a0:	f7ff ffac 	bl	80025fc <__sfp_lock_acquire>
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <__sfp+0x84>)
 80026a6:	681e      	ldr	r6, [r3, #0]
 80026a8:	69b3      	ldr	r3, [r6, #24]
 80026aa:	b913      	cbnz	r3, 80026b2 <__sfp+0x16>
 80026ac:	4630      	mov	r0, r6
 80026ae:	f7ff ffbd 	bl	800262c <__sinit>
 80026b2:	3648      	adds	r6, #72	; 0x48
 80026b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	d503      	bpl.n	80026c4 <__sfp+0x28>
 80026bc:	6833      	ldr	r3, [r6, #0]
 80026be:	b30b      	cbz	r3, 8002704 <__sfp+0x68>
 80026c0:	6836      	ldr	r6, [r6, #0]
 80026c2:	e7f7      	b.n	80026b4 <__sfp+0x18>
 80026c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026c8:	b9d5      	cbnz	r5, 8002700 <__sfp+0x64>
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <__sfp+0x88>)
 80026cc:	60e3      	str	r3, [r4, #12]
 80026ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026d2:	6665      	str	r5, [r4, #100]	; 0x64
 80026d4:	f000 f847 	bl	8002766 <__retarget_lock_init_recursive>
 80026d8:	f7ff ff96 	bl	8002608 <__sfp_lock_release>
 80026dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026e4:	6025      	str	r5, [r4, #0]
 80026e6:	61a5      	str	r5, [r4, #24]
 80026e8:	2208      	movs	r2, #8
 80026ea:	4629      	mov	r1, r5
 80026ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026f0:	f7ff fd2c 	bl	800214c <memset>
 80026f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80026fc:	4620      	mov	r0, r4
 80026fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002700:	3468      	adds	r4, #104	; 0x68
 8002702:	e7d9      	b.n	80026b8 <__sfp+0x1c>
 8002704:	2104      	movs	r1, #4
 8002706:	4638      	mov	r0, r7
 8002708:	f7ff ff62 	bl	80025d0 <__sfmoreglue>
 800270c:	4604      	mov	r4, r0
 800270e:	6030      	str	r0, [r6, #0]
 8002710:	2800      	cmp	r0, #0
 8002712:	d1d5      	bne.n	80026c0 <__sfp+0x24>
 8002714:	f7ff ff78 	bl	8002608 <__sfp_lock_release>
 8002718:	230c      	movs	r3, #12
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	e7ee      	b.n	80026fc <__sfp+0x60>
 800271e:	bf00      	nop
 8002720:	08003180 	.word	0x08003180
 8002724:	ffff0001 	.word	0xffff0001

08002728 <_fwalk_reent>:
 8002728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800272c:	4606      	mov	r6, r0
 800272e:	4688      	mov	r8, r1
 8002730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002734:	2700      	movs	r7, #0
 8002736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800273a:	f1b9 0901 	subs.w	r9, r9, #1
 800273e:	d505      	bpl.n	800274c <_fwalk_reent+0x24>
 8002740:	6824      	ldr	r4, [r4, #0]
 8002742:	2c00      	cmp	r4, #0
 8002744:	d1f7      	bne.n	8002736 <_fwalk_reent+0xe>
 8002746:	4638      	mov	r0, r7
 8002748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800274c:	89ab      	ldrh	r3, [r5, #12]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d907      	bls.n	8002762 <_fwalk_reent+0x3a>
 8002752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002756:	3301      	adds	r3, #1
 8002758:	d003      	beq.n	8002762 <_fwalk_reent+0x3a>
 800275a:	4629      	mov	r1, r5
 800275c:	4630      	mov	r0, r6
 800275e:	47c0      	blx	r8
 8002760:	4307      	orrs	r7, r0
 8002762:	3568      	adds	r5, #104	; 0x68
 8002764:	e7e9      	b.n	800273a <_fwalk_reent+0x12>

08002766 <__retarget_lock_init_recursive>:
 8002766:	4770      	bx	lr

08002768 <__retarget_lock_acquire_recursive>:
 8002768:	4770      	bx	lr

0800276a <__retarget_lock_release_recursive>:
 800276a:	4770      	bx	lr

0800276c <__swhatbuf_r>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	460e      	mov	r6, r1
 8002770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002774:	2900      	cmp	r1, #0
 8002776:	b096      	sub	sp, #88	; 0x58
 8002778:	4614      	mov	r4, r2
 800277a:	461d      	mov	r5, r3
 800277c:	da07      	bge.n	800278e <__swhatbuf_r+0x22>
 800277e:	2300      	movs	r3, #0
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	89b3      	ldrh	r3, [r6, #12]
 8002784:	061a      	lsls	r2, r3, #24
 8002786:	d410      	bmi.n	80027aa <__swhatbuf_r+0x3e>
 8002788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278c:	e00e      	b.n	80027ac <__swhatbuf_r+0x40>
 800278e:	466a      	mov	r2, sp
 8002790:	f000 fc5e 	bl	8003050 <_fstat_r>
 8002794:	2800      	cmp	r0, #0
 8002796:	dbf2      	blt.n	800277e <__swhatbuf_r+0x12>
 8002798:	9a01      	ldr	r2, [sp, #4]
 800279a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800279e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027a2:	425a      	negs	r2, r3
 80027a4:	415a      	adcs	r2, r3
 80027a6:	602a      	str	r2, [r5, #0]
 80027a8:	e7ee      	b.n	8002788 <__swhatbuf_r+0x1c>
 80027aa:	2340      	movs	r3, #64	; 0x40
 80027ac:	2000      	movs	r0, #0
 80027ae:	6023      	str	r3, [r4, #0]
 80027b0:	b016      	add	sp, #88	; 0x58
 80027b2:	bd70      	pop	{r4, r5, r6, pc}

080027b4 <__smakebuf_r>:
 80027b4:	898b      	ldrh	r3, [r1, #12]
 80027b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027b8:	079d      	lsls	r5, r3, #30
 80027ba:	4606      	mov	r6, r0
 80027bc:	460c      	mov	r4, r1
 80027be:	d507      	bpl.n	80027d0 <__smakebuf_r+0x1c>
 80027c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	6123      	str	r3, [r4, #16]
 80027c8:	2301      	movs	r3, #1
 80027ca:	6163      	str	r3, [r4, #20]
 80027cc:	b002      	add	sp, #8
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
 80027d0:	ab01      	add	r3, sp, #4
 80027d2:	466a      	mov	r2, sp
 80027d4:	f7ff ffca 	bl	800276c <__swhatbuf_r>
 80027d8:	9900      	ldr	r1, [sp, #0]
 80027da:	4605      	mov	r5, r0
 80027dc:	4630      	mov	r0, r6
 80027de:	f000 f879 	bl	80028d4 <_malloc_r>
 80027e2:	b948      	cbnz	r0, 80027f8 <__smakebuf_r+0x44>
 80027e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027e8:	059a      	lsls	r2, r3, #22
 80027ea:	d4ef      	bmi.n	80027cc <__smakebuf_r+0x18>
 80027ec:	f023 0303 	bic.w	r3, r3, #3
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	81a3      	strh	r3, [r4, #12]
 80027f6:	e7e3      	b.n	80027c0 <__smakebuf_r+0xc>
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <__smakebuf_r+0x7c>)
 80027fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80027fc:	89a3      	ldrh	r3, [r4, #12]
 80027fe:	6020      	str	r0, [r4, #0]
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	81a3      	strh	r3, [r4, #12]
 8002806:	9b00      	ldr	r3, [sp, #0]
 8002808:	6163      	str	r3, [r4, #20]
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	6120      	str	r0, [r4, #16]
 800280e:	b15b      	cbz	r3, 8002828 <__smakebuf_r+0x74>
 8002810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002814:	4630      	mov	r0, r6
 8002816:	f000 fc2d 	bl	8003074 <_isatty_r>
 800281a:	b128      	cbz	r0, 8002828 <__smakebuf_r+0x74>
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	81a3      	strh	r3, [r4, #12]
 8002828:	89a0      	ldrh	r0, [r4, #12]
 800282a:	4305      	orrs	r5, r0
 800282c:	81a5      	strh	r5, [r4, #12]
 800282e:	e7cd      	b.n	80027cc <__smakebuf_r+0x18>
 8002830:	080025c5 	.word	0x080025c5

08002834 <_free_r>:
 8002834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002836:	2900      	cmp	r1, #0
 8002838:	d048      	beq.n	80028cc <_free_r+0x98>
 800283a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800283e:	9001      	str	r0, [sp, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f1a1 0404 	sub.w	r4, r1, #4
 8002846:	bfb8      	it	lt
 8002848:	18e4      	addlt	r4, r4, r3
 800284a:	f000 fc35 	bl	80030b8 <__malloc_lock>
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <_free_r+0x9c>)
 8002850:	9801      	ldr	r0, [sp, #4]
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	4615      	mov	r5, r2
 8002856:	b933      	cbnz	r3, 8002866 <_free_r+0x32>
 8002858:	6063      	str	r3, [r4, #4]
 800285a:	6014      	str	r4, [r2, #0]
 800285c:	b003      	add	sp, #12
 800285e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002862:	f000 bc2f 	b.w	80030c4 <__malloc_unlock>
 8002866:	42a3      	cmp	r3, r4
 8002868:	d90b      	bls.n	8002882 <_free_r+0x4e>
 800286a:	6821      	ldr	r1, [r4, #0]
 800286c:	1862      	adds	r2, r4, r1
 800286e:	4293      	cmp	r3, r2
 8002870:	bf04      	itt	eq
 8002872:	681a      	ldreq	r2, [r3, #0]
 8002874:	685b      	ldreq	r3, [r3, #4]
 8002876:	6063      	str	r3, [r4, #4]
 8002878:	bf04      	itt	eq
 800287a:	1852      	addeq	r2, r2, r1
 800287c:	6022      	streq	r2, [r4, #0]
 800287e:	602c      	str	r4, [r5, #0]
 8002880:	e7ec      	b.n	800285c <_free_r+0x28>
 8002882:	461a      	mov	r2, r3
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b10b      	cbz	r3, 800288c <_free_r+0x58>
 8002888:	42a3      	cmp	r3, r4
 800288a:	d9fa      	bls.n	8002882 <_free_r+0x4e>
 800288c:	6811      	ldr	r1, [r2, #0]
 800288e:	1855      	adds	r5, r2, r1
 8002890:	42a5      	cmp	r5, r4
 8002892:	d10b      	bne.n	80028ac <_free_r+0x78>
 8002894:	6824      	ldr	r4, [r4, #0]
 8002896:	4421      	add	r1, r4
 8002898:	1854      	adds	r4, r2, r1
 800289a:	42a3      	cmp	r3, r4
 800289c:	6011      	str	r1, [r2, #0]
 800289e:	d1dd      	bne.n	800285c <_free_r+0x28>
 80028a0:	681c      	ldr	r4, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	6053      	str	r3, [r2, #4]
 80028a6:	4421      	add	r1, r4
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	e7d7      	b.n	800285c <_free_r+0x28>
 80028ac:	d902      	bls.n	80028b4 <_free_r+0x80>
 80028ae:	230c      	movs	r3, #12
 80028b0:	6003      	str	r3, [r0, #0]
 80028b2:	e7d3      	b.n	800285c <_free_r+0x28>
 80028b4:	6825      	ldr	r5, [r4, #0]
 80028b6:	1961      	adds	r1, r4, r5
 80028b8:	428b      	cmp	r3, r1
 80028ba:	bf04      	itt	eq
 80028bc:	6819      	ldreq	r1, [r3, #0]
 80028be:	685b      	ldreq	r3, [r3, #4]
 80028c0:	6063      	str	r3, [r4, #4]
 80028c2:	bf04      	itt	eq
 80028c4:	1949      	addeq	r1, r1, r5
 80028c6:	6021      	streq	r1, [r4, #0]
 80028c8:	6054      	str	r4, [r2, #4]
 80028ca:	e7c7      	b.n	800285c <_free_r+0x28>
 80028cc:	b003      	add	sp, #12
 80028ce:	bd30      	pop	{r4, r5, pc}
 80028d0:	20000094 	.word	0x20000094

080028d4 <_malloc_r>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	1ccd      	adds	r5, r1, #3
 80028d8:	f025 0503 	bic.w	r5, r5, #3
 80028dc:	3508      	adds	r5, #8
 80028de:	2d0c      	cmp	r5, #12
 80028e0:	bf38      	it	cc
 80028e2:	250c      	movcc	r5, #12
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	4606      	mov	r6, r0
 80028e8:	db01      	blt.n	80028ee <_malloc_r+0x1a>
 80028ea:	42a9      	cmp	r1, r5
 80028ec:	d903      	bls.n	80028f6 <_malloc_r+0x22>
 80028ee:	230c      	movs	r3, #12
 80028f0:	6033      	str	r3, [r6, #0]
 80028f2:	2000      	movs	r0, #0
 80028f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f6:	f000 fbdf 	bl	80030b8 <__malloc_lock>
 80028fa:	4921      	ldr	r1, [pc, #132]	; (8002980 <_malloc_r+0xac>)
 80028fc:	680a      	ldr	r2, [r1, #0]
 80028fe:	4614      	mov	r4, r2
 8002900:	b99c      	cbnz	r4, 800292a <_malloc_r+0x56>
 8002902:	4f20      	ldr	r7, [pc, #128]	; (8002984 <_malloc_r+0xb0>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b923      	cbnz	r3, 8002912 <_malloc_r+0x3e>
 8002908:	4621      	mov	r1, r4
 800290a:	4630      	mov	r0, r6
 800290c:	f000 fb2a 	bl	8002f64 <_sbrk_r>
 8002910:	6038      	str	r0, [r7, #0]
 8002912:	4629      	mov	r1, r5
 8002914:	4630      	mov	r0, r6
 8002916:	f000 fb25 	bl	8002f64 <_sbrk_r>
 800291a:	1c43      	adds	r3, r0, #1
 800291c:	d123      	bne.n	8002966 <_malloc_r+0x92>
 800291e:	230c      	movs	r3, #12
 8002920:	6033      	str	r3, [r6, #0]
 8002922:	4630      	mov	r0, r6
 8002924:	f000 fbce 	bl	80030c4 <__malloc_unlock>
 8002928:	e7e3      	b.n	80028f2 <_malloc_r+0x1e>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	1b5b      	subs	r3, r3, r5
 800292e:	d417      	bmi.n	8002960 <_malloc_r+0x8c>
 8002930:	2b0b      	cmp	r3, #11
 8002932:	d903      	bls.n	800293c <_malloc_r+0x68>
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	441c      	add	r4, r3
 8002938:	6025      	str	r5, [r4, #0]
 800293a:	e004      	b.n	8002946 <_malloc_r+0x72>
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	42a2      	cmp	r2, r4
 8002940:	bf0c      	ite	eq
 8002942:	600b      	streq	r3, [r1, #0]
 8002944:	6053      	strne	r3, [r2, #4]
 8002946:	4630      	mov	r0, r6
 8002948:	f000 fbbc 	bl	80030c4 <__malloc_unlock>
 800294c:	f104 000b 	add.w	r0, r4, #11
 8002950:	1d23      	adds	r3, r4, #4
 8002952:	f020 0007 	bic.w	r0, r0, #7
 8002956:	1ac2      	subs	r2, r0, r3
 8002958:	d0cc      	beq.n	80028f4 <_malloc_r+0x20>
 800295a:	1a1b      	subs	r3, r3, r0
 800295c:	50a3      	str	r3, [r4, r2]
 800295e:	e7c9      	b.n	80028f4 <_malloc_r+0x20>
 8002960:	4622      	mov	r2, r4
 8002962:	6864      	ldr	r4, [r4, #4]
 8002964:	e7cc      	b.n	8002900 <_malloc_r+0x2c>
 8002966:	1cc4      	adds	r4, r0, #3
 8002968:	f024 0403 	bic.w	r4, r4, #3
 800296c:	42a0      	cmp	r0, r4
 800296e:	d0e3      	beq.n	8002938 <_malloc_r+0x64>
 8002970:	1a21      	subs	r1, r4, r0
 8002972:	4630      	mov	r0, r6
 8002974:	f000 faf6 	bl	8002f64 <_sbrk_r>
 8002978:	3001      	adds	r0, #1
 800297a:	d1dd      	bne.n	8002938 <_malloc_r+0x64>
 800297c:	e7cf      	b.n	800291e <_malloc_r+0x4a>
 800297e:	bf00      	nop
 8002980:	20000094 	.word	0x20000094
 8002984:	20000098 	.word	0x20000098

08002988 <__sfputc_r>:
 8002988:	6893      	ldr	r3, [r2, #8]
 800298a:	3b01      	subs	r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	b410      	push	{r4}
 8002990:	6093      	str	r3, [r2, #8]
 8002992:	da08      	bge.n	80029a6 <__sfputc_r+0x1e>
 8002994:	6994      	ldr	r4, [r2, #24]
 8002996:	42a3      	cmp	r3, r4
 8002998:	db01      	blt.n	800299e <__sfputc_r+0x16>
 800299a:	290a      	cmp	r1, #10
 800299c:	d103      	bne.n	80029a6 <__sfputc_r+0x1e>
 800299e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029a2:	f7ff bc69 	b.w	8002278 <__swbuf_r>
 80029a6:	6813      	ldr	r3, [r2, #0]
 80029a8:	1c58      	adds	r0, r3, #1
 80029aa:	6010      	str	r0, [r2, #0]
 80029ac:	7019      	strb	r1, [r3, #0]
 80029ae:	4608      	mov	r0, r1
 80029b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <__sfputs_r>:
 80029b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b8:	4606      	mov	r6, r0
 80029ba:	460f      	mov	r7, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	18d5      	adds	r5, r2, r3
 80029c0:	42ac      	cmp	r4, r5
 80029c2:	d101      	bne.n	80029c8 <__sfputs_r+0x12>
 80029c4:	2000      	movs	r0, #0
 80029c6:	e007      	b.n	80029d8 <__sfputs_r+0x22>
 80029c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029cc:	463a      	mov	r2, r7
 80029ce:	4630      	mov	r0, r6
 80029d0:	f7ff ffda 	bl	8002988 <__sfputc_r>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d1f3      	bne.n	80029c0 <__sfputs_r+0xa>
 80029d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029dc <_vfiprintf_r>:
 80029dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e0:	460d      	mov	r5, r1
 80029e2:	b09d      	sub	sp, #116	; 0x74
 80029e4:	4614      	mov	r4, r2
 80029e6:	4698      	mov	r8, r3
 80029e8:	4606      	mov	r6, r0
 80029ea:	b118      	cbz	r0, 80029f4 <_vfiprintf_r+0x18>
 80029ec:	6983      	ldr	r3, [r0, #24]
 80029ee:	b90b      	cbnz	r3, 80029f4 <_vfiprintf_r+0x18>
 80029f0:	f7ff fe1c 	bl	800262c <__sinit>
 80029f4:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <_vfiprintf_r+0x240>)
 80029f6:	429d      	cmp	r5, r3
 80029f8:	d11b      	bne.n	8002a32 <_vfiprintf_r+0x56>
 80029fa:	6875      	ldr	r5, [r6, #4]
 80029fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029fe:	07d9      	lsls	r1, r3, #31
 8002a00:	d405      	bmi.n	8002a0e <_vfiprintf_r+0x32>
 8002a02:	89ab      	ldrh	r3, [r5, #12]
 8002a04:	059a      	lsls	r2, r3, #22
 8002a06:	d402      	bmi.n	8002a0e <_vfiprintf_r+0x32>
 8002a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a0a:	f7ff fead 	bl	8002768 <__retarget_lock_acquire_recursive>
 8002a0e:	89ab      	ldrh	r3, [r5, #12]
 8002a10:	071b      	lsls	r3, r3, #28
 8002a12:	d501      	bpl.n	8002a18 <_vfiprintf_r+0x3c>
 8002a14:	692b      	ldr	r3, [r5, #16]
 8002a16:	b9eb      	cbnz	r3, 8002a54 <_vfiprintf_r+0x78>
 8002a18:	4629      	mov	r1, r5
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f7ff fc7e 	bl	800231c <__swsetup_r>
 8002a20:	b1c0      	cbz	r0, 8002a54 <_vfiprintf_r+0x78>
 8002a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a24:	07dc      	lsls	r4, r3, #31
 8002a26:	d50e      	bpl.n	8002a46 <_vfiprintf_r+0x6a>
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	b01d      	add	sp, #116	; 0x74
 8002a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a32:	4b7b      	ldr	r3, [pc, #492]	; (8002c20 <_vfiprintf_r+0x244>)
 8002a34:	429d      	cmp	r5, r3
 8002a36:	d101      	bne.n	8002a3c <_vfiprintf_r+0x60>
 8002a38:	68b5      	ldr	r5, [r6, #8]
 8002a3a:	e7df      	b.n	80029fc <_vfiprintf_r+0x20>
 8002a3c:	4b79      	ldr	r3, [pc, #484]	; (8002c24 <_vfiprintf_r+0x248>)
 8002a3e:	429d      	cmp	r5, r3
 8002a40:	bf08      	it	eq
 8002a42:	68f5      	ldreq	r5, [r6, #12]
 8002a44:	e7da      	b.n	80029fc <_vfiprintf_r+0x20>
 8002a46:	89ab      	ldrh	r3, [r5, #12]
 8002a48:	0598      	lsls	r0, r3, #22
 8002a4a:	d4ed      	bmi.n	8002a28 <_vfiprintf_r+0x4c>
 8002a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a4e:	f7ff fe8c 	bl	800276a <__retarget_lock_release_recursive>
 8002a52:	e7e9      	b.n	8002a28 <_vfiprintf_r+0x4c>
 8002a54:	2300      	movs	r3, #0
 8002a56:	9309      	str	r3, [sp, #36]	; 0x24
 8002a58:	2320      	movs	r3, #32
 8002a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a62:	2330      	movs	r3, #48	; 0x30
 8002a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002c28 <_vfiprintf_r+0x24c>
 8002a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a6c:	f04f 0901 	mov.w	r9, #1
 8002a70:	4623      	mov	r3, r4
 8002a72:	469a      	mov	sl, r3
 8002a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a78:	b10a      	cbz	r2, 8002a7e <_vfiprintf_r+0xa2>
 8002a7a:	2a25      	cmp	r2, #37	; 0x25
 8002a7c:	d1f9      	bne.n	8002a72 <_vfiprintf_r+0x96>
 8002a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8002a82:	d00b      	beq.n	8002a9c <_vfiprintf_r+0xc0>
 8002a84:	465b      	mov	r3, fp
 8002a86:	4622      	mov	r2, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f7ff ff93 	bl	80029b6 <__sfputs_r>
 8002a90:	3001      	adds	r0, #1
 8002a92:	f000 80aa 	beq.w	8002bea <_vfiprintf_r+0x20e>
 8002a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a98:	445a      	add	r2, fp
 8002a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8002a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a2 	beq.w	8002bea <_vfiprintf_r+0x20e>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ab0:	f10a 0a01 	add.w	sl, sl, #1
 8002ab4:	9304      	str	r3, [sp, #16]
 8002ab6:	9307      	str	r3, [sp, #28]
 8002ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002abc:	931a      	str	r3, [sp, #104]	; 0x68
 8002abe:	4654      	mov	r4, sl
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac6:	4858      	ldr	r0, [pc, #352]	; (8002c28 <_vfiprintf_r+0x24c>)
 8002ac8:	f7fd fb82 	bl	80001d0 <memchr>
 8002acc:	9a04      	ldr	r2, [sp, #16]
 8002ace:	b9d8      	cbnz	r0, 8002b08 <_vfiprintf_r+0x12c>
 8002ad0:	06d1      	lsls	r1, r2, #27
 8002ad2:	bf44      	itt	mi
 8002ad4:	2320      	movmi	r3, #32
 8002ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ada:	0713      	lsls	r3, r2, #28
 8002adc:	bf44      	itt	mi
 8002ade:	232b      	movmi	r3, #43	; 0x2b
 8002ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8002aea:	d015      	beq.n	8002b18 <_vfiprintf_r+0x13c>
 8002aec:	9a07      	ldr	r2, [sp, #28]
 8002aee:	4654      	mov	r4, sl
 8002af0:	2000      	movs	r0, #0
 8002af2:	f04f 0c0a 	mov.w	ip, #10
 8002af6:	4621      	mov	r1, r4
 8002af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002afc:	3b30      	subs	r3, #48	; 0x30
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	d94e      	bls.n	8002ba0 <_vfiprintf_r+0x1c4>
 8002b02:	b1b0      	cbz	r0, 8002b32 <_vfiprintf_r+0x156>
 8002b04:	9207      	str	r2, [sp, #28]
 8002b06:	e014      	b.n	8002b32 <_vfiprintf_r+0x156>
 8002b08:	eba0 0308 	sub.w	r3, r0, r8
 8002b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	9304      	str	r3, [sp, #16]
 8002b14:	46a2      	mov	sl, r4
 8002b16:	e7d2      	b.n	8002abe <_vfiprintf_r+0xe2>
 8002b18:	9b03      	ldr	r3, [sp, #12]
 8002b1a:	1d19      	adds	r1, r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	9103      	str	r1, [sp, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bfbb      	ittet	lt
 8002b24:	425b      	neglt	r3, r3
 8002b26:	f042 0202 	orrlt.w	r2, r2, #2
 8002b2a:	9307      	strge	r3, [sp, #28]
 8002b2c:	9307      	strlt	r3, [sp, #28]
 8002b2e:	bfb8      	it	lt
 8002b30:	9204      	strlt	r2, [sp, #16]
 8002b32:	7823      	ldrb	r3, [r4, #0]
 8002b34:	2b2e      	cmp	r3, #46	; 0x2e
 8002b36:	d10c      	bne.n	8002b52 <_vfiprintf_r+0x176>
 8002b38:	7863      	ldrb	r3, [r4, #1]
 8002b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b3c:	d135      	bne.n	8002baa <_vfiprintf_r+0x1ce>
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	1d1a      	adds	r2, r3, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	9203      	str	r2, [sp, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bfb8      	it	lt
 8002b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b4e:	3402      	adds	r4, #2
 8002b50:	9305      	str	r3, [sp, #20]
 8002b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002c38 <_vfiprintf_r+0x25c>
 8002b56:	7821      	ldrb	r1, [r4, #0]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4650      	mov	r0, sl
 8002b5c:	f7fd fb38 	bl	80001d0 <memchr>
 8002b60:	b140      	cbz	r0, 8002b74 <_vfiprintf_r+0x198>
 8002b62:	2340      	movs	r3, #64	; 0x40
 8002b64:	eba0 000a 	sub.w	r0, r0, sl
 8002b68:	fa03 f000 	lsl.w	r0, r3, r0
 8002b6c:	9b04      	ldr	r3, [sp, #16]
 8002b6e:	4303      	orrs	r3, r0
 8002b70:	3401      	adds	r4, #1
 8002b72:	9304      	str	r3, [sp, #16]
 8002b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b78:	482c      	ldr	r0, [pc, #176]	; (8002c2c <_vfiprintf_r+0x250>)
 8002b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b7e:	2206      	movs	r2, #6
 8002b80:	f7fd fb26 	bl	80001d0 <memchr>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d03f      	beq.n	8002c08 <_vfiprintf_r+0x22c>
 8002b88:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <_vfiprintf_r+0x254>)
 8002b8a:	bb1b      	cbnz	r3, 8002bd4 <_vfiprintf_r+0x1f8>
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	3307      	adds	r3, #7
 8002b90:	f023 0307 	bic.w	r3, r3, #7
 8002b94:	3308      	adds	r3, #8
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b9a:	443b      	add	r3, r7
 8002b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b9e:	e767      	b.n	8002a70 <_vfiprintf_r+0x94>
 8002ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	e7a5      	b.n	8002af6 <_vfiprintf_r+0x11a>
 8002baa:	2300      	movs	r3, #0
 8002bac:	3401      	adds	r4, #1
 8002bae:	9305      	str	r3, [sp, #20]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f04f 0c0a 	mov.w	ip, #10
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bbc:	3a30      	subs	r2, #48	; 0x30
 8002bbe:	2a09      	cmp	r2, #9
 8002bc0:	d903      	bls.n	8002bca <_vfiprintf_r+0x1ee>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0c5      	beq.n	8002b52 <_vfiprintf_r+0x176>
 8002bc6:	9105      	str	r1, [sp, #20]
 8002bc8:	e7c3      	b.n	8002b52 <_vfiprintf_r+0x176>
 8002bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bce:	4604      	mov	r4, r0
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e7f0      	b.n	8002bb6 <_vfiprintf_r+0x1da>
 8002bd4:	ab03      	add	r3, sp, #12
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <_vfiprintf_r+0x258>)
 8002bdc:	a904      	add	r1, sp, #16
 8002bde:	4630      	mov	r0, r6
 8002be0:	f3af 8000 	nop.w
 8002be4:	4607      	mov	r7, r0
 8002be6:	1c78      	adds	r0, r7, #1
 8002be8:	d1d6      	bne.n	8002b98 <_vfiprintf_r+0x1bc>
 8002bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bec:	07d9      	lsls	r1, r3, #31
 8002bee:	d405      	bmi.n	8002bfc <_vfiprintf_r+0x220>
 8002bf0:	89ab      	ldrh	r3, [r5, #12]
 8002bf2:	059a      	lsls	r2, r3, #22
 8002bf4:	d402      	bmi.n	8002bfc <_vfiprintf_r+0x220>
 8002bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bf8:	f7ff fdb7 	bl	800276a <__retarget_lock_release_recursive>
 8002bfc:	89ab      	ldrh	r3, [r5, #12]
 8002bfe:	065b      	lsls	r3, r3, #25
 8002c00:	f53f af12 	bmi.w	8002a28 <_vfiprintf_r+0x4c>
 8002c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c06:	e711      	b.n	8002a2c <_vfiprintf_r+0x50>
 8002c08:	ab03      	add	r3, sp, #12
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <_vfiprintf_r+0x258>)
 8002c10:	a904      	add	r1, sp, #16
 8002c12:	4630      	mov	r0, r6
 8002c14:	f000 f880 	bl	8002d18 <_printf_i>
 8002c18:	e7e4      	b.n	8002be4 <_vfiprintf_r+0x208>
 8002c1a:	bf00      	nop
 8002c1c:	080031a4 	.word	0x080031a4
 8002c20:	080031c4 	.word	0x080031c4
 8002c24:	08003184 	.word	0x08003184
 8002c28:	080031e4 	.word	0x080031e4
 8002c2c:	080031ee 	.word	0x080031ee
 8002c30:	00000000 	.word	0x00000000
 8002c34:	080029b7 	.word	0x080029b7
 8002c38:	080031ea 	.word	0x080031ea

08002c3c <_printf_common>:
 8002c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c40:	4616      	mov	r6, r2
 8002c42:	4699      	mov	r9, r3
 8002c44:	688a      	ldr	r2, [r1, #8]
 8002c46:	690b      	ldr	r3, [r1, #16]
 8002c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bfb8      	it	lt
 8002c50:	4613      	movlt	r3, r2
 8002c52:	6033      	str	r3, [r6, #0]
 8002c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c58:	4607      	mov	r7, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	b10a      	cbz	r2, 8002c62 <_printf_common+0x26>
 8002c5e:	3301      	adds	r3, #1
 8002c60:	6033      	str	r3, [r6, #0]
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	0699      	lsls	r1, r3, #26
 8002c66:	bf42      	ittt	mi
 8002c68:	6833      	ldrmi	r3, [r6, #0]
 8002c6a:	3302      	addmi	r3, #2
 8002c6c:	6033      	strmi	r3, [r6, #0]
 8002c6e:	6825      	ldr	r5, [r4, #0]
 8002c70:	f015 0506 	ands.w	r5, r5, #6
 8002c74:	d106      	bne.n	8002c84 <_printf_common+0x48>
 8002c76:	f104 0a19 	add.w	sl, r4, #25
 8002c7a:	68e3      	ldr	r3, [r4, #12]
 8002c7c:	6832      	ldr	r2, [r6, #0]
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	dc26      	bgt.n	8002cd2 <_printf_common+0x96>
 8002c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c88:	1e13      	subs	r3, r2, #0
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	bf18      	it	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	0692      	lsls	r2, r2, #26
 8002c92:	d42b      	bmi.n	8002cec <_printf_common+0xb0>
 8002c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c98:	4649      	mov	r1, r9
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	47c0      	blx	r8
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d01e      	beq.n	8002ce0 <_printf_common+0xa4>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	68e5      	ldr	r5, [r4, #12]
 8002ca6:	6832      	ldr	r2, [r6, #0]
 8002ca8:	f003 0306 	and.w	r3, r3, #6
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	bf08      	it	eq
 8002cb0:	1aad      	subeq	r5, r5, r2
 8002cb2:	68a3      	ldr	r3, [r4, #8]
 8002cb4:	6922      	ldr	r2, [r4, #16]
 8002cb6:	bf0c      	ite	eq
 8002cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cbc:	2500      	movne	r5, #0
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	bfc4      	itt	gt
 8002cc2:	1a9b      	subgt	r3, r3, r2
 8002cc4:	18ed      	addgt	r5, r5, r3
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	341a      	adds	r4, #26
 8002cca:	42b5      	cmp	r5, r6
 8002ccc:	d11a      	bne.n	8002d04 <_printf_common+0xc8>
 8002cce:	2000      	movs	r0, #0
 8002cd0:	e008      	b.n	8002ce4 <_printf_common+0xa8>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	4652      	mov	r2, sl
 8002cd6:	4649      	mov	r1, r9
 8002cd8:	4638      	mov	r0, r7
 8002cda:	47c0      	blx	r8
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d103      	bne.n	8002ce8 <_printf_common+0xac>
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce8:	3501      	adds	r5, #1
 8002cea:	e7c6      	b.n	8002c7a <_printf_common+0x3e>
 8002cec:	18e1      	adds	r1, r4, r3
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	2030      	movs	r0, #48	; 0x30
 8002cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cf6:	4422      	add	r2, r4
 8002cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d00:	3302      	adds	r3, #2
 8002d02:	e7c7      	b.n	8002c94 <_printf_common+0x58>
 8002d04:	2301      	movs	r3, #1
 8002d06:	4622      	mov	r2, r4
 8002d08:	4649      	mov	r1, r9
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	47c0      	blx	r8
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d0e6      	beq.n	8002ce0 <_printf_common+0xa4>
 8002d12:	3601      	adds	r6, #1
 8002d14:	e7d9      	b.n	8002cca <_printf_common+0x8e>
	...

08002d18 <_printf_i>:
 8002d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	4691      	mov	r9, r2
 8002d20:	7e27      	ldrb	r7, [r4, #24]
 8002d22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d24:	2f78      	cmp	r7, #120	; 0x78
 8002d26:	4680      	mov	r8, r0
 8002d28:	469a      	mov	sl, r3
 8002d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d2e:	d807      	bhi.n	8002d40 <_printf_i+0x28>
 8002d30:	2f62      	cmp	r7, #98	; 0x62
 8002d32:	d80a      	bhi.n	8002d4a <_printf_i+0x32>
 8002d34:	2f00      	cmp	r7, #0
 8002d36:	f000 80d8 	beq.w	8002eea <_printf_i+0x1d2>
 8002d3a:	2f58      	cmp	r7, #88	; 0x58
 8002d3c:	f000 80a3 	beq.w	8002e86 <_printf_i+0x16e>
 8002d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d48:	e03a      	b.n	8002dc0 <_printf_i+0xa8>
 8002d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d4e:	2b15      	cmp	r3, #21
 8002d50:	d8f6      	bhi.n	8002d40 <_printf_i+0x28>
 8002d52:	a001      	add	r0, pc, #4	; (adr r0, 8002d58 <_printf_i+0x40>)
 8002d54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d58:	08002db1 	.word	0x08002db1
 8002d5c:	08002dc5 	.word	0x08002dc5
 8002d60:	08002d41 	.word	0x08002d41
 8002d64:	08002d41 	.word	0x08002d41
 8002d68:	08002d41 	.word	0x08002d41
 8002d6c:	08002d41 	.word	0x08002d41
 8002d70:	08002dc5 	.word	0x08002dc5
 8002d74:	08002d41 	.word	0x08002d41
 8002d78:	08002d41 	.word	0x08002d41
 8002d7c:	08002d41 	.word	0x08002d41
 8002d80:	08002d41 	.word	0x08002d41
 8002d84:	08002ed1 	.word	0x08002ed1
 8002d88:	08002df5 	.word	0x08002df5
 8002d8c:	08002eb3 	.word	0x08002eb3
 8002d90:	08002d41 	.word	0x08002d41
 8002d94:	08002d41 	.word	0x08002d41
 8002d98:	08002ef3 	.word	0x08002ef3
 8002d9c:	08002d41 	.word	0x08002d41
 8002da0:	08002df5 	.word	0x08002df5
 8002da4:	08002d41 	.word	0x08002d41
 8002da8:	08002d41 	.word	0x08002d41
 8002dac:	08002ebb 	.word	0x08002ebb
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	600a      	str	r2, [r1, #0]
 8002db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0a3      	b.n	8002f0c <_printf_i+0x1f4>
 8002dc4:	6825      	ldr	r5, [r4, #0]
 8002dc6:	6808      	ldr	r0, [r1, #0]
 8002dc8:	062e      	lsls	r6, r5, #24
 8002dca:	f100 0304 	add.w	r3, r0, #4
 8002dce:	d50a      	bpl.n	8002de6 <_printf_i+0xce>
 8002dd0:	6805      	ldr	r5, [r0, #0]
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	da03      	bge.n	8002de0 <_printf_i+0xc8>
 8002dd8:	232d      	movs	r3, #45	; 0x2d
 8002dda:	426d      	negs	r5, r5
 8002ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de0:	485e      	ldr	r0, [pc, #376]	; (8002f5c <_printf_i+0x244>)
 8002de2:	230a      	movs	r3, #10
 8002de4:	e019      	b.n	8002e1a <_printf_i+0x102>
 8002de6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002dea:	6805      	ldr	r5, [r0, #0]
 8002dec:	600b      	str	r3, [r1, #0]
 8002dee:	bf18      	it	ne
 8002df0:	b22d      	sxthne	r5, r5
 8002df2:	e7ef      	b.n	8002dd4 <_printf_i+0xbc>
 8002df4:	680b      	ldr	r3, [r1, #0]
 8002df6:	6825      	ldr	r5, [r4, #0]
 8002df8:	1d18      	adds	r0, r3, #4
 8002dfa:	6008      	str	r0, [r1, #0]
 8002dfc:	0628      	lsls	r0, r5, #24
 8002dfe:	d501      	bpl.n	8002e04 <_printf_i+0xec>
 8002e00:	681d      	ldr	r5, [r3, #0]
 8002e02:	e002      	b.n	8002e0a <_printf_i+0xf2>
 8002e04:	0669      	lsls	r1, r5, #25
 8002e06:	d5fb      	bpl.n	8002e00 <_printf_i+0xe8>
 8002e08:	881d      	ldrh	r5, [r3, #0]
 8002e0a:	4854      	ldr	r0, [pc, #336]	; (8002f5c <_printf_i+0x244>)
 8002e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8002e0e:	bf0c      	ite	eq
 8002e10:	2308      	moveq	r3, #8
 8002e12:	230a      	movne	r3, #10
 8002e14:	2100      	movs	r1, #0
 8002e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e1a:	6866      	ldr	r6, [r4, #4]
 8002e1c:	60a6      	str	r6, [r4, #8]
 8002e1e:	2e00      	cmp	r6, #0
 8002e20:	bfa2      	ittt	ge
 8002e22:	6821      	ldrge	r1, [r4, #0]
 8002e24:	f021 0104 	bicge.w	r1, r1, #4
 8002e28:	6021      	strge	r1, [r4, #0]
 8002e2a:	b90d      	cbnz	r5, 8002e30 <_printf_i+0x118>
 8002e2c:	2e00      	cmp	r6, #0
 8002e2e:	d04d      	beq.n	8002ecc <_printf_i+0x1b4>
 8002e30:	4616      	mov	r6, r2
 8002e32:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e36:	fb03 5711 	mls	r7, r3, r1, r5
 8002e3a:	5dc7      	ldrb	r7, [r0, r7]
 8002e3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e40:	462f      	mov	r7, r5
 8002e42:	42bb      	cmp	r3, r7
 8002e44:	460d      	mov	r5, r1
 8002e46:	d9f4      	bls.n	8002e32 <_printf_i+0x11a>
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d10b      	bne.n	8002e64 <_printf_i+0x14c>
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	07df      	lsls	r7, r3, #31
 8002e50:	d508      	bpl.n	8002e64 <_printf_i+0x14c>
 8002e52:	6923      	ldr	r3, [r4, #16]
 8002e54:	6861      	ldr	r1, [r4, #4]
 8002e56:	4299      	cmp	r1, r3
 8002e58:	bfde      	ittt	le
 8002e5a:	2330      	movle	r3, #48	; 0x30
 8002e5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e64:	1b92      	subs	r2, r2, r6
 8002e66:	6122      	str	r2, [r4, #16]
 8002e68:	f8cd a000 	str.w	sl, [sp]
 8002e6c:	464b      	mov	r3, r9
 8002e6e:	aa03      	add	r2, sp, #12
 8002e70:	4621      	mov	r1, r4
 8002e72:	4640      	mov	r0, r8
 8002e74:	f7ff fee2 	bl	8002c3c <_printf_common>
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d14c      	bne.n	8002f16 <_printf_i+0x1fe>
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	b004      	add	sp, #16
 8002e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e86:	4835      	ldr	r0, [pc, #212]	; (8002f5c <_printf_i+0x244>)
 8002e88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	680e      	ldr	r6, [r1, #0]
 8002e90:	061f      	lsls	r7, r3, #24
 8002e92:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e96:	600e      	str	r6, [r1, #0]
 8002e98:	d514      	bpl.n	8002ec4 <_printf_i+0x1ac>
 8002e9a:	07d9      	lsls	r1, r3, #31
 8002e9c:	bf44      	itt	mi
 8002e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8002ea2:	6023      	strmi	r3, [r4, #0]
 8002ea4:	b91d      	cbnz	r5, 8002eae <_printf_i+0x196>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	f023 0320 	bic.w	r3, r3, #32
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	2310      	movs	r3, #16
 8002eb0:	e7b0      	b.n	8002e14 <_printf_i+0xfc>
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	f043 0320 	orr.w	r3, r3, #32
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	2378      	movs	r3, #120	; 0x78
 8002ebc:	4828      	ldr	r0, [pc, #160]	; (8002f60 <_printf_i+0x248>)
 8002ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ec2:	e7e3      	b.n	8002e8c <_printf_i+0x174>
 8002ec4:	065e      	lsls	r6, r3, #25
 8002ec6:	bf48      	it	mi
 8002ec8:	b2ad      	uxthmi	r5, r5
 8002eca:	e7e6      	b.n	8002e9a <_printf_i+0x182>
 8002ecc:	4616      	mov	r6, r2
 8002ece:	e7bb      	b.n	8002e48 <_printf_i+0x130>
 8002ed0:	680b      	ldr	r3, [r1, #0]
 8002ed2:	6826      	ldr	r6, [r4, #0]
 8002ed4:	6960      	ldr	r0, [r4, #20]
 8002ed6:	1d1d      	adds	r5, r3, #4
 8002ed8:	600d      	str	r5, [r1, #0]
 8002eda:	0635      	lsls	r5, r6, #24
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	d501      	bpl.n	8002ee4 <_printf_i+0x1cc>
 8002ee0:	6018      	str	r0, [r3, #0]
 8002ee2:	e002      	b.n	8002eea <_printf_i+0x1d2>
 8002ee4:	0671      	lsls	r1, r6, #25
 8002ee6:	d5fb      	bpl.n	8002ee0 <_printf_i+0x1c8>
 8002ee8:	8018      	strh	r0, [r3, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6123      	str	r3, [r4, #16]
 8002eee:	4616      	mov	r6, r2
 8002ef0:	e7ba      	b.n	8002e68 <_printf_i+0x150>
 8002ef2:	680b      	ldr	r3, [r1, #0]
 8002ef4:	1d1a      	adds	r2, r3, #4
 8002ef6:	600a      	str	r2, [r1, #0]
 8002ef8:	681e      	ldr	r6, [r3, #0]
 8002efa:	6862      	ldr	r2, [r4, #4]
 8002efc:	2100      	movs	r1, #0
 8002efe:	4630      	mov	r0, r6
 8002f00:	f7fd f966 	bl	80001d0 <memchr>
 8002f04:	b108      	cbz	r0, 8002f0a <_printf_i+0x1f2>
 8002f06:	1b80      	subs	r0, r0, r6
 8002f08:	6060      	str	r0, [r4, #4]
 8002f0a:	6863      	ldr	r3, [r4, #4]
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f14:	e7a8      	b.n	8002e68 <_printf_i+0x150>
 8002f16:	6923      	ldr	r3, [r4, #16]
 8002f18:	4632      	mov	r2, r6
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	47d0      	blx	sl
 8002f20:	3001      	adds	r0, #1
 8002f22:	d0ab      	beq.n	8002e7c <_printf_i+0x164>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	079b      	lsls	r3, r3, #30
 8002f28:	d413      	bmi.n	8002f52 <_printf_i+0x23a>
 8002f2a:	68e0      	ldr	r0, [r4, #12]
 8002f2c:	9b03      	ldr	r3, [sp, #12]
 8002f2e:	4298      	cmp	r0, r3
 8002f30:	bfb8      	it	lt
 8002f32:	4618      	movlt	r0, r3
 8002f34:	e7a4      	b.n	8002e80 <_printf_i+0x168>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4632      	mov	r2, r6
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	4640      	mov	r0, r8
 8002f3e:	47d0      	blx	sl
 8002f40:	3001      	adds	r0, #1
 8002f42:	d09b      	beq.n	8002e7c <_printf_i+0x164>
 8002f44:	3501      	adds	r5, #1
 8002f46:	68e3      	ldr	r3, [r4, #12]
 8002f48:	9903      	ldr	r1, [sp, #12]
 8002f4a:	1a5b      	subs	r3, r3, r1
 8002f4c:	42ab      	cmp	r3, r5
 8002f4e:	dcf2      	bgt.n	8002f36 <_printf_i+0x21e>
 8002f50:	e7eb      	b.n	8002f2a <_printf_i+0x212>
 8002f52:	2500      	movs	r5, #0
 8002f54:	f104 0619 	add.w	r6, r4, #25
 8002f58:	e7f5      	b.n	8002f46 <_printf_i+0x22e>
 8002f5a:	bf00      	nop
 8002f5c:	080031f5 	.word	0x080031f5
 8002f60:	08003206 	.word	0x08003206

08002f64 <_sbrk_r>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	4d06      	ldr	r5, [pc, #24]	; (8002f80 <_sbrk_r+0x1c>)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	602b      	str	r3, [r5, #0]
 8002f70:	f7fd fd70 	bl	8000a54 <_sbrk>
 8002f74:	1c43      	adds	r3, r0, #1
 8002f76:	d102      	bne.n	8002f7e <_sbrk_r+0x1a>
 8002f78:	682b      	ldr	r3, [r5, #0]
 8002f7a:	b103      	cbz	r3, 8002f7e <_sbrk_r+0x1a>
 8002f7c:	6023      	str	r3, [r4, #0]
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}
 8002f80:	20000134 	.word	0x20000134

08002f84 <__sread>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	460c      	mov	r4, r1
 8002f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f8c:	f000 f8a0 	bl	80030d0 <_read_r>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	bfab      	itete	ge
 8002f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f96:	89a3      	ldrhlt	r3, [r4, #12]
 8002f98:	181b      	addge	r3, r3, r0
 8002f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f9e:	bfac      	ite	ge
 8002fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fa2:	81a3      	strhlt	r3, [r4, #12]
 8002fa4:	bd10      	pop	{r4, pc}

08002fa6 <__swrite>:
 8002fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002faa:	461f      	mov	r7, r3
 8002fac:	898b      	ldrh	r3, [r1, #12]
 8002fae:	05db      	lsls	r3, r3, #23
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	d505      	bpl.n	8002fc4 <__swrite+0x1e>
 8002fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f000 f868 	bl	8003094 <_lseek_r>
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fda:	f000 b817 	b.w	800300c <_write_r>

08002fde <__sseek>:
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe6:	f000 f855 	bl	8003094 <_lseek_r>
 8002fea:	1c43      	adds	r3, r0, #1
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	bf15      	itete	ne
 8002ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ffa:	81a3      	strheq	r3, [r4, #12]
 8002ffc:	bf18      	it	ne
 8002ffe:	81a3      	strhne	r3, [r4, #12]
 8003000:	bd10      	pop	{r4, pc}

08003002 <__sclose>:
 8003002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003006:	f000 b813 	b.w	8003030 <_close_r>
	...

0800300c <_write_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4d07      	ldr	r5, [pc, #28]	; (800302c <_write_r+0x20>)
 8003010:	4604      	mov	r4, r0
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	2200      	movs	r2, #0
 8003018:	602a      	str	r2, [r5, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f7fd fcc9 	bl	80009b2 <_write>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_write_r+0x1e>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b103      	cbz	r3, 800302a <_write_r+0x1e>
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	20000134 	.word	0x20000134

08003030 <_close_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	4d06      	ldr	r5, [pc, #24]	; (800304c <_close_r+0x1c>)
 8003034:	2300      	movs	r3, #0
 8003036:	4604      	mov	r4, r0
 8003038:	4608      	mov	r0, r1
 800303a:	602b      	str	r3, [r5, #0]
 800303c:	f7fd fcd5 	bl	80009ea <_close>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d102      	bne.n	800304a <_close_r+0x1a>
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	b103      	cbz	r3, 800304a <_close_r+0x1a>
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	bd38      	pop	{r3, r4, r5, pc}
 800304c:	20000134 	.word	0x20000134

08003050 <_fstat_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4d07      	ldr	r5, [pc, #28]	; (8003070 <_fstat_r+0x20>)
 8003054:	2300      	movs	r3, #0
 8003056:	4604      	mov	r4, r0
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	602b      	str	r3, [r5, #0]
 800305e:	f7fd fcd0 	bl	8000a02 <_fstat>
 8003062:	1c43      	adds	r3, r0, #1
 8003064:	d102      	bne.n	800306c <_fstat_r+0x1c>
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	b103      	cbz	r3, 800306c <_fstat_r+0x1c>
 800306a:	6023      	str	r3, [r4, #0]
 800306c:	bd38      	pop	{r3, r4, r5, pc}
 800306e:	bf00      	nop
 8003070:	20000134 	.word	0x20000134

08003074 <_isatty_r>:
 8003074:	b538      	push	{r3, r4, r5, lr}
 8003076:	4d06      	ldr	r5, [pc, #24]	; (8003090 <_isatty_r+0x1c>)
 8003078:	2300      	movs	r3, #0
 800307a:	4604      	mov	r4, r0
 800307c:	4608      	mov	r0, r1
 800307e:	602b      	str	r3, [r5, #0]
 8003080:	f7fd fccf 	bl	8000a22 <_isatty>
 8003084:	1c43      	adds	r3, r0, #1
 8003086:	d102      	bne.n	800308e <_isatty_r+0x1a>
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	b103      	cbz	r3, 800308e <_isatty_r+0x1a>
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	bd38      	pop	{r3, r4, r5, pc}
 8003090:	20000134 	.word	0x20000134

08003094 <_lseek_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	4d07      	ldr	r5, [pc, #28]	; (80030b4 <_lseek_r+0x20>)
 8003098:	4604      	mov	r4, r0
 800309a:	4608      	mov	r0, r1
 800309c:	4611      	mov	r1, r2
 800309e:	2200      	movs	r2, #0
 80030a0:	602a      	str	r2, [r5, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f7fd fcc8 	bl	8000a38 <_lseek>
 80030a8:	1c43      	adds	r3, r0, #1
 80030aa:	d102      	bne.n	80030b2 <_lseek_r+0x1e>
 80030ac:	682b      	ldr	r3, [r5, #0]
 80030ae:	b103      	cbz	r3, 80030b2 <_lseek_r+0x1e>
 80030b0:	6023      	str	r3, [r4, #0]
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
 80030b4:	20000134 	.word	0x20000134

080030b8 <__malloc_lock>:
 80030b8:	4801      	ldr	r0, [pc, #4]	; (80030c0 <__malloc_lock+0x8>)
 80030ba:	f7ff bb55 	b.w	8002768 <__retarget_lock_acquire_recursive>
 80030be:	bf00      	nop
 80030c0:	2000012c 	.word	0x2000012c

080030c4 <__malloc_unlock>:
 80030c4:	4801      	ldr	r0, [pc, #4]	; (80030cc <__malloc_unlock+0x8>)
 80030c6:	f7ff bb50 	b.w	800276a <__retarget_lock_release_recursive>
 80030ca:	bf00      	nop
 80030cc:	2000012c 	.word	0x2000012c

080030d0 <_read_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d07      	ldr	r5, [pc, #28]	; (80030f0 <_read_r+0x20>)
 80030d4:	4604      	mov	r4, r0
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	602a      	str	r2, [r5, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7fd fc4a 	bl	8000978 <_read>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_read_r+0x1e>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_read_r+0x1e>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	20000134 	.word	0x20000134

080030f4 <_init>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr

08003100 <_fini>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr
