
SW_STM32F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001974  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001afc  08001afc  00011afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b14  08001b14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001b14  08001b14  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b1c  08001b1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b1c  08001b1c  00011b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b20  08001b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b02a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001843  00000000  00000000  0002b066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000800  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e326  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2ac  00000000  00000000  0004bc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b89f0  00000000  00000000  00055f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010e8fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002284  00000000  00000000  0010e950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ae4 	.word	0x08001ae4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001ae4 	.word	0x08001ae4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 f9e7 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f893 	bl	8000604 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f867 	bl	80005b0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80004e2:	f000 f82d 	bl	8000540 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  	char msg[] = "Hello world\n";
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <main+0x64>)
 80004e8:	463c      	mov	r4, r7
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	c407      	stmia	r4!, {r0, r1, r2}
 80004ee:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);//Sent data by UART
 80004f0:	463b      	mov	r3, r7
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe68 	bl	80001c8 <strlen>
 80004f8:	4603      	mov	r3, r0
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4639      	mov	r1, r7
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x68>)
 8000504:	f000 ff5f 	bl	80013c6 <HAL_UART_Transmit>

	      if (HAL_UART_Receive(&huart1, rx_buffer, 1, HAL_MAX_DELAY) == HAL_OK)// Receive data by UART
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	2201      	movs	r2, #1
 800050e:	490b      	ldr	r1, [pc, #44]	; (800053c <main+0x6c>)
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <main+0x68>)
 8000512:	f000 ffea 	bl	80014ea <HAL_UART_Receive>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d106      	bne.n	800052a <main+0x5a>
	      {
	          // Resend the data just received
	          HAL_UART_Transmit(&huart1, rx_buffer, 1,  HAL_MAX_DELAY);
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	2201      	movs	r2, #1
 8000522:	4906      	ldr	r1, [pc, #24]	; (800053c <main+0x6c>)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x68>)
 8000526:	f000 ff4e 	bl	80013c6 <HAL_UART_Transmit>
	      }



	  HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 fa2d 	bl	800098c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);//Sent data by UART
 8000532:	e7dd      	b.n	80004f0 <main+0x20>
 8000534:	08001afc 	.word	0x08001afc
 8000538:	20000034 	.word	0x20000034
 800053c:	20000028 	.word	0x20000028

08000540 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000546:	4a19      	ldr	r2, [pc, #100]	; (80005ac <MX_SPI1_Init+0x6c>)
 8000548:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_SPI1_Init+0x68>)
 800054c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000550:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000554:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000558:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_SPI1_Init+0x68>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_SPI1_Init+0x68>)
 800056e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000572:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_SPI1_Init+0x68>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000588:	2200      	movs	r2, #0
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_SPI1_Init+0x68>)
 800058e:	220a      	movs	r2, #10
 8000590:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_SPI1_Init+0x68>)
 8000594:	f000 fd22 	bl	8000fdc <HAL_SPI_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800059e:	f000 f84b 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000078 	.word	0x20000078
 80005ac:	40013000 	.word	0x40013000

080005b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <MX_USART1_UART_Init+0x50>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_USART1_UART_Init+0x4c>)
 80005e8:	f000 fea0 	bl	800132c <HAL_UART_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005f2:	f000 f821 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000034 	.word	0x20000034
 8000600:	40011000 	.word	0x40011000

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_GPIO_Init+0x30>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <MX_GPIO_Init+0x30>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_GPIO_Init+0x30>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x4>
	...

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_MspInit+0x4c>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <HAL_MspInit+0x4c>)
 8000650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000654:	6453      	str	r3, [r2, #68]	; 0x44
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <HAL_MspInit+0x4c>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_MspInit+0x4c>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <HAL_MspInit+0x4c>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	6413      	str	r3, [r2, #64]	; 0x40
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_MspInit+0x4c>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <HAL_SPI_MspInit+0x94>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d133      	bne.n	800071a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_SPI_MspInit+0x98>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <HAL_SPI_MspInit+0x98>)
 80006bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_SPI_MspInit+0x98>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_SPI_MspInit+0x98>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_SPI_MspInit+0x98>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_SPI_MspInit+0x98>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006ea:	23f0      	movs	r3, #240	; 0xf0
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006fa:	2305      	movs	r3, #5
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <HAL_SPI_MspInit+0x9c>)
 8000706:	f000 fa99 	bl	8000c3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2023      	movs	r0, #35	; 0x23
 8000710:	f000 fa3b 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000714:	2023      	movs	r0, #35	; 0x23
 8000716:	f000 fa54 	bl	8000bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40013000 	.word	0x40013000
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_UART_MspInit+0x84>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d12c      	bne.n	80007ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <HAL_UART_MspInit+0x88>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_UART_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800078a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800079c:	2307      	movs	r3, #7
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_UART_MspInit+0x8c>)
 80007a8:	f000 fa48 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40011000 	.word	0x40011000
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020000 	.word	0x40020000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f89a 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <SPI1_IRQHandler+0x10>)
 8000822:	f000 fc65 	bl	80010f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000078 	.word	0x20000078

08000830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800088c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800085a:	490e      	ldr	r1, [pc, #56]	; (8000894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000870:	4c0b      	ldr	r4, [pc, #44]	; (80008a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800087e:	f7ff ffd7 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000882:	f001 f90b 	bl	8001a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000886:	f7ff fe23 	bl	80004d0 <main>
  bx  lr    
 800088a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800088c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000898:	08001b24 	.word	0x08001b24
  ldr r2, =_sbss
 800089c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a0:	200000d4 	.word	0x200000d4

080008a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <HAL_Init+0x40>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_Init+0x40>)
 80008be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_Init+0x40>)
 80008ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f94f 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	200f      	movs	r0, #15
 80008d8:	f000 f808 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff feb0 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023c00 	.word	0x40023c00

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x54>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0x58>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	fbb3 f3f1 	udiv	r3, r3, r1
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f967 	bl	8000bde <HAL_SYSTICK_Config>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e00e      	b.n	8000938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d80a      	bhi.n	8000936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f000 f92f 	bl	8000b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <HAL_InitTick+0x5c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	20000008 	.word	0x20000008
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	200000d0 	.word	0x200000d0

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200000d0 	.word	0x200000d0

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff ffee 	bl	8000974 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffde 	bl	8000974 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff29 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff3e 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ff8e 	bl	8000ac8 <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5d 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff31 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffa2 	bl	8000b30 <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d004      	beq.n	8000c14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e00c      	b.n	8000c2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2205      	movs	r2, #5
 8000c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0201 	bic.w	r2, r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	e16b      	b.n	8000f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f040 815a 	bne.w	8000f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d005      	beq.n	8000c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d130      	bne.n	8000cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 0201 	and.w	r2, r3, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d017      	beq.n	8000d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d123      	bne.n	8000d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	69b9      	ldr	r1, [r7, #24]
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0203 	and.w	r2, r3, #3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80b4 	beq.w	8000f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a5f      	ldr	r2, [pc, #380]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dde:	4a5b      	ldr	r2, [pc, #364]	; (8000f4c <HAL_GPIO_Init+0x310>)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <HAL_GPIO_Init+0x314>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d02b      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a51      	ldr	r2, [pc, #324]	; (8000f54 <HAL_GPIO_Init+0x318>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d025      	beq.n	8000e5e <HAL_GPIO_Init+0x222>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x31c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d01f      	beq.n	8000e5a <HAL_GPIO_Init+0x21e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x320>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_GPIO_Init+0x21a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4e      	ldr	r2, [pc, #312]	; (8000f60 <HAL_GPIO_Init+0x324>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0x216>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4d      	ldr	r2, [pc, #308]	; (8000f64 <HAL_GPIO_Init+0x328>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00d      	beq.n	8000e4e <HAL_GPIO_Init+0x212>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4c      	ldr	r2, [pc, #304]	; (8000f68 <HAL_GPIO_Init+0x32c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x20e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_GPIO_Init+0x20a>
 8000e42:	2307      	movs	r3, #7
 8000e44:	e00e      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e46:	2308      	movs	r3, #8
 8000e48:	e00c      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e00a      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e4e:	2305      	movs	r3, #5
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4935      	ldr	r1, [pc, #212]	; (8000f4c <HAL_GPIO_Init+0x310>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e82:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea6:	4a32      	ldr	r2, [pc, #200]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f ae90 	bls.w	8000c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40021800 	.word	0x40021800
 8000f6c:	40021c00 	.word	0x40021c00
 8000f70:	40013c00 	.word	0x40013c00

08000f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000

08000f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f90:	f7ff fff0 	bl	8000f74 <HAL_RCC_GetHCLKFreq>
 8000f94:	4602      	mov	r2, r0
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	0a9b      	lsrs	r3, r3, #10
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	4903      	ldr	r1, [pc, #12]	; (8000fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fa2:	5ccb      	ldrb	r3, [r1, r3]
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	08001b0c 	.word	0x08001b0c

08000fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fb8:	f7ff ffdc 	bl	8000f74 <HAL_RCC_GetHCLKFreq>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	0b5b      	lsrs	r3, r3, #13
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	4903      	ldr	r1, [pc, #12]	; (8000fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fca:	5ccb      	ldrb	r3, [r1, r3]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	08001b0c 	.word	0x08001b0c

08000fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e07b      	b.n	80010e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d108      	bne.n	8001008 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ffe:	d009      	beq.n	8001014 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
 8001006:	e005      	b.n	8001014 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d106      	bne.n	8001034 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fb2e 	bl	8000690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2202      	movs	r2, #2
 8001038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800104a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	ea42 0103 	orr.w	r1, r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	f003 0104 	and.w	r1, r3, #4
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f003 0210 	and.w	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	099b      	lsrs	r3, r3, #6
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10f      	bne.n	8001134 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00a      	beq.n	8001134 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
    return;
 8001132:	e0d7      	b.n	80012e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00a      	beq.n	8001156 <HAL_SPI_IRQHandler+0x66>
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	09db      	lsrs	r3, r3, #7
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
    return;
 8001154:	e0c6      	b.n	80012e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	095b      	lsrs	r3, r3, #5
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10c      	bne.n	800117c <HAL_SPI_IRQHandler+0x8c>
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d106      	bne.n	800117c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80b4 	beq.w	80012e4 <HAL_SPI_IRQHandler+0x1f4>
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80ad 	beq.w	80012e4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	099b      	lsrs	r3, r3, #6
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d023      	beq.n	80011de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d011      	beq.n	80011c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	f043 0204 	orr.w	r2, r3, #4
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	e00b      	b.n	80011de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
        return;
 80011dc:	e082      	b.n	80012e4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f043 0208 	orr.w	r2, r3, #8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	2b00      	cmp	r3, #0
 8001240:	d04f      	beq.n	80012e2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001250:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <HAL_SPI_IRQHandler+0x17e>
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d034      	beq.n	80012d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0203 	bic.w	r2, r2, #3
 800127c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d011      	beq.n	80012aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <HAL_SPI_IRQHandler+0x1fc>)
 800128c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fcaf 	bl	8000bf6 <HAL_DMA_Abort_IT>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_SPI_IRQHandler+0x1fc>)
 80012b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fc99 	bl	8000bf6 <HAL_DMA_Abort_IT>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00a      	beq.n	80012e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80012d6:	e003      	b.n	80012e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f809 	bl	80012f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80012de:	e000      	b.n	80012e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80012e0:	bf00      	nop
    return;
 80012e2:	bf00      	nop
  }
}
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08001305 	.word	0x08001305

080012f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ffe6 	bl	80012f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e03f      	b.n	80013be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f9ec 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2224      	movs	r2, #36	; 0x24
 800135c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800136e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9cb 	bl	800170c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b08a      	sub	sp, #40	; 0x28
 80013ca:	af02      	add	r7, sp, #8
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d17c      	bne.n	80014e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_UART_Transmit+0x2c>
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e075      	b.n	80014e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_UART_Transmit+0x3e>
 8001400:	2302      	movs	r3, #2
 8001402:	e06e      	b.n	80014e2 <HAL_UART_Transmit+0x11c>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2221      	movs	r2, #33	; 0x21
 8001416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800141a:	f7ff faab 	bl	8000974 <HAL_GetTick>
 800141e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	88fa      	ldrh	r2, [r7, #6]
 8001424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001434:	d108      	bne.n	8001448 <HAL_UART_Transmit+0x82>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d104      	bne.n	8001448 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	e003      	b.n	8001450 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001458:	e02a      	b.n	80014b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2200      	movs	r2, #0
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f8e2 	bl	800162e <UART_WaitOnFlagUntilTimeout>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e036      	b.n	80014e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10b      	bne.n	8001492 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	3302      	adds	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	e007      	b.n	80014a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	3301      	adds	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1cf      	bne.n	800145a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2200      	movs	r2, #0
 80014c2:	2140      	movs	r1, #64	; 0x40
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f8b2 	bl	800162e <UART_WaitOnFlagUntilTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e006      	b.n	80014e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2220      	movs	r2, #32
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	e000      	b.n	80014e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80014e0:	2302      	movs	r3, #2
  }
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b08a      	sub	sp, #40	; 0x28
 80014ee:	af02      	add	r7, sp, #8
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	f040 808c 	bne.w	8001624 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <HAL_UART_Receive+0x2e>
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e084      	b.n	8001626 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_UART_Receive+0x40>
 8001526:	2302      	movs	r3, #2
 8001528:	e07d      	b.n	8001626 <HAL_UART_Receive+0x13c>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2222      	movs	r2, #34	; 0x22
 800153c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001546:	f7ff fa15 	bl	8000974 <HAL_GetTick>
 800154a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001560:	d108      	bne.n	8001574 <HAL_UART_Receive+0x8a>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d104      	bne.n	8001574 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	e003      	b.n	800157c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001584:	e043      	b.n	800160e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2200      	movs	r2, #0
 800158e:	2120      	movs	r1, #32
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f84c 	bl	800162e <UART_WaitOnFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e042      	b.n	8001626 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	3302      	adds	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	e01f      	b.n	8001600 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c8:	d007      	beq.n	80015da <HAL_UART_Receive+0xf0>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10a      	bne.n	80015e8 <HAL_UART_Receive+0xfe>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e008      	b.n	80015fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001612:	b29b      	uxth	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1b6      	bne.n	8001586 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	e000      	b.n	8001626 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001624:	2302      	movs	r3, #2
  }
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b090      	sub	sp, #64	; 0x40
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4613      	mov	r3, r2
 800163c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800163e:	e050      	b.n	80016e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001646:	d04c      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <UART_WaitOnFlagUntilTimeout+0x30>
 800164e:	f7ff f991 	bl	8000974 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800165a:	429a      	cmp	r2, r3
 800165c:	d241      	bcs.n	80016e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	330c      	adds	r3, #12
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	e853 3f00 	ldrex	r3, [r3]
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	330c      	adds	r3, #12
 800167c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800167e:	637a      	str	r2, [r7, #52]	; 0x34
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001686:	e841 2300 	strex	r3, r2, [r1]
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e5      	bne.n	800165e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3314      	adds	r3, #20
 8001698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	e853 3f00 	ldrex	r3, [r3]
 80016a0:	613b      	str	r3, [r7, #16]
   return(result);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3314      	adds	r3, #20
 80016b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016b2:	623a      	str	r2, [r7, #32]
 80016b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016b6:	69f9      	ldr	r1, [r7, #28]
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	e841 2300 	strex	r3, r2, [r1]
 80016be:	61bb      	str	r3, [r7, #24]
   return(result);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1e5      	bne.n	8001692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e00f      	b.n	8001702 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4013      	ands	r3, r2
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d09f      	beq.n	8001640 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3740      	adds	r7, #64	; 0x40
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001710:	b09f      	sub	sp, #124	; 0x7c
 8001712:	af00      	add	r7, sp, #0
 8001714:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	ea40 0301 	orr.w	r3, r0, r1
 800172c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800172e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	431a      	orrs	r2, r3
 8001738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	431a      	orrs	r2, r3
 800173e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4313      	orrs	r3, r2
 8001744:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001750:	f021 010c 	bic.w	r1, r1, #12
 8001754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800175a:	430b      	orrs	r3, r1
 800175c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800175e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176a:	6999      	ldr	r1, [r3, #24]
 800176c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	ea40 0301 	orr.w	r3, r0, r1
 8001774:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4bc5      	ldr	r3, [pc, #788]	; (8001a90 <UART_SetConfig+0x384>)
 800177c:	429a      	cmp	r2, r3
 800177e:	d004      	beq.n	800178a <UART_SetConfig+0x7e>
 8001780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4bc3      	ldr	r3, [pc, #780]	; (8001a94 <UART_SetConfig+0x388>)
 8001786:	429a      	cmp	r2, r3
 8001788:	d103      	bne.n	8001792 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800178a:	f7ff fc13 	bl	8000fb4 <HAL_RCC_GetPCLK2Freq>
 800178e:	6778      	str	r0, [r7, #116]	; 0x74
 8001790:	e002      	b.n	8001798 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001792:	f7ff fbfb 	bl	8000f8c <HAL_RCC_GetPCLK1Freq>
 8001796:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a0:	f040 80b6 	bne.w	8001910 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80017a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a6:	461c      	mov	r4, r3
 80017a8:	f04f 0500 	mov.w	r5, #0
 80017ac:	4622      	mov	r2, r4
 80017ae:	462b      	mov	r3, r5
 80017b0:	1891      	adds	r1, r2, r2
 80017b2:	6439      	str	r1, [r7, #64]	; 0x40
 80017b4:	415b      	adcs	r3, r3
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
 80017b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017bc:	1912      	adds	r2, r2, r4
 80017be:	eb45 0303 	adc.w	r3, r5, r3
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	00d9      	lsls	r1, r3, #3
 80017cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017d0:	00d0      	lsls	r0, r2, #3
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	1911      	adds	r1, r2, r4
 80017d8:	6639      	str	r1, [r7, #96]	; 0x60
 80017da:	416b      	adcs	r3, r5
 80017dc:	667b      	str	r3, [r7, #100]	; 0x64
 80017de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	461a      	mov	r2, r3
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	1891      	adds	r1, r2, r2
 80017ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80017ec:	415b      	adcs	r3, r3
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80017f8:	f7fe fcee 	bl	80001d8 <__aeabi_uldivmod>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4ba5      	ldr	r3, [pc, #660]	; (8001a98 <UART_SetConfig+0x38c>)
 8001802:	fba3 2302 	umull	r2, r3, r3, r2
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	011e      	lsls	r6, r3, #4
 800180a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800180c:	461c      	mov	r4, r3
 800180e:	f04f 0500 	mov.w	r5, #0
 8001812:	4622      	mov	r2, r4
 8001814:	462b      	mov	r3, r5
 8001816:	1891      	adds	r1, r2, r2
 8001818:	6339      	str	r1, [r7, #48]	; 0x30
 800181a:	415b      	adcs	r3, r3
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
 800181e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001822:	1912      	adds	r2, r2, r4
 8001824:	eb45 0303 	adc.w	r3, r5, r3
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	00d9      	lsls	r1, r3, #3
 8001832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001836:	00d0      	lsls	r0, r2, #3
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	1911      	adds	r1, r2, r4
 800183e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001840:	416b      	adcs	r3, r5
 8001842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	461a      	mov	r2, r3
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	1891      	adds	r1, r2, r2
 8001850:	62b9      	str	r1, [r7, #40]	; 0x28
 8001852:	415b      	adcs	r3, r3
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800185a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800185e:	f7fe fcbb 	bl	80001d8 <__aeabi_uldivmod>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <UART_SetConfig+0x38c>)
 8001868:	fba3 1302 	umull	r1, r3, r3, r2
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	2164      	movs	r1, #100	; 0x64
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	3332      	adds	r3, #50	; 0x32
 800187a:	4a87      	ldr	r2, [pc, #540]	; (8001a98 <UART_SetConfig+0x38c>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001888:	441e      	add	r6, r3
 800188a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800188c:	4618      	mov	r0, r3
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	1894      	adds	r4, r2, r2
 8001898:	623c      	str	r4, [r7, #32]
 800189a:	415b      	adcs	r3, r3
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a2:	1812      	adds	r2, r2, r0
 80018a4:	eb41 0303 	adc.w	r3, r1, r3
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	f04f 0500 	mov.w	r5, #0
 80018b0:	00dd      	lsls	r5, r3, #3
 80018b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80018b6:	00d4      	lsls	r4, r2, #3
 80018b8:	4622      	mov	r2, r4
 80018ba:	462b      	mov	r3, r5
 80018bc:	1814      	adds	r4, r2, r0
 80018be:	653c      	str	r4, [r7, #80]	; 0x50
 80018c0:	414b      	adcs	r3, r1
 80018c2:	657b      	str	r3, [r7, #84]	; 0x54
 80018c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	461a      	mov	r2, r3
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	1891      	adds	r1, r2, r2
 80018d0:	61b9      	str	r1, [r7, #24]
 80018d2:	415b      	adcs	r3, r3
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018de:	f7fe fc7b 	bl	80001d8 <__aeabi_uldivmod>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <UART_SetConfig+0x38c>)
 80018e8:	fba3 1302 	umull	r1, r3, r3, r2
 80018ec:	095b      	lsrs	r3, r3, #5
 80018ee:	2164      	movs	r1, #100	; 0x64
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	3332      	adds	r3, #50	; 0x32
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <UART_SetConfig+0x38c>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	095b      	lsrs	r3, r3, #5
 8001902:	f003 0207 	and.w	r2, r3, #7
 8001906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4432      	add	r2, r6
 800190c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800190e:	e0b9      	b.n	8001a84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001912:	461c      	mov	r4, r3
 8001914:	f04f 0500 	mov.w	r5, #0
 8001918:	4622      	mov	r2, r4
 800191a:	462b      	mov	r3, r5
 800191c:	1891      	adds	r1, r2, r2
 800191e:	6139      	str	r1, [r7, #16]
 8001920:	415b      	adcs	r3, r3
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001928:	1912      	adds	r2, r2, r4
 800192a:	eb45 0303 	adc.w	r3, r5, r3
 800192e:	f04f 0000 	mov.w	r0, #0
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	00d9      	lsls	r1, r3, #3
 8001938:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800193c:	00d0      	lsls	r0, r2, #3
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	eb12 0804 	adds.w	r8, r2, r4
 8001946:	eb43 0905 	adc.w	r9, r3, r5
 800194a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	008b      	lsls	r3, r1, #2
 800195e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001962:	0082      	lsls	r2, r0, #2
 8001964:	4640      	mov	r0, r8
 8001966:	4649      	mov	r1, r9
 8001968:	f7fe fc36 	bl	80001d8 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <UART_SetConfig+0x38c>)
 8001972:	fba3 2302 	umull	r2, r3, r3, r2
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	011e      	lsls	r6, r3, #4
 800197a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800197c:	4618      	mov	r0, r3
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	1894      	adds	r4, r2, r2
 8001988:	60bc      	str	r4, [r7, #8]
 800198a:	415b      	adcs	r3, r3
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001992:	1812      	adds	r2, r2, r0
 8001994:	eb41 0303 	adc.w	r3, r1, r3
 8001998:	f04f 0400 	mov.w	r4, #0
 800199c:	f04f 0500 	mov.w	r5, #0
 80019a0:	00dd      	lsls	r5, r3, #3
 80019a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80019a6:	00d4      	lsls	r4, r2, #3
 80019a8:	4622      	mov	r2, r4
 80019aa:	462b      	mov	r3, r5
 80019ac:	1814      	adds	r4, r2, r0
 80019ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80019b0:	414b      	adcs	r3, r1
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	008b      	lsls	r3, r1, #2
 80019c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80019cc:	0082      	lsls	r2, r0, #2
 80019ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019d2:	f7fe fc01 	bl	80001d8 <__aeabi_uldivmod>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <UART_SetConfig+0x38c>)
 80019dc:	fba3 1302 	umull	r1, r3, r3, r2
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	2164      	movs	r1, #100	; 0x64
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	3332      	adds	r3, #50	; 0x32
 80019ee:	4a2a      	ldr	r2, [pc, #168]	; (8001a98 <UART_SetConfig+0x38c>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fa:	441e      	add	r6, r3
 80019fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019fe:	4618      	mov	r0, r3
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	1894      	adds	r4, r2, r2
 8001a0a:	603c      	str	r4, [r7, #0]
 8001a0c:	415b      	adcs	r3, r3
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a14:	1812      	adds	r2, r2, r0
 8001a16:	eb41 0303 	adc.w	r3, r1, r3
 8001a1a:	f04f 0400 	mov.w	r4, #0
 8001a1e:	f04f 0500 	mov.w	r5, #0
 8001a22:	00dd      	lsls	r5, r3, #3
 8001a24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001a28:	00d4      	lsls	r4, r2, #3
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	eb12 0a00 	adds.w	sl, r2, r0
 8001a32:	eb43 0b01 	adc.w	fp, r3, r1
 8001a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	008b      	lsls	r3, r1, #2
 8001a4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001a4e:	0082      	lsls	r2, r0, #2
 8001a50:	4650      	mov	r0, sl
 8001a52:	4659      	mov	r1, fp
 8001a54:	f7fe fbc0 	bl	80001d8 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <UART_SetConfig+0x38c>)
 8001a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2164      	movs	r1, #100	; 0x64
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	3332      	adds	r3, #50	; 0x32
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <UART_SetConfig+0x38c>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	f003 020f 	and.w	r2, r3, #15
 8001a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4432      	add	r2, r6
 8001a82:	609a      	str	r2, [r3, #8]
}
 8001a84:	bf00      	nop
 8001a86:	377c      	adds	r7, #124	; 0x7c
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a8e:	bf00      	nop
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40011400 	.word	0x40011400
 8001a98:	51eb851f 	.word	0x51eb851f

08001a9c <__libc_init_array>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	4d0d      	ldr	r5, [pc, #52]	; (8001ad4 <__libc_init_array+0x38>)
 8001aa0:	4c0d      	ldr	r4, [pc, #52]	; (8001ad8 <__libc_init_array+0x3c>)
 8001aa2:	1b64      	subs	r4, r4, r5
 8001aa4:	10a4      	asrs	r4, r4, #2
 8001aa6:	2600      	movs	r6, #0
 8001aa8:	42a6      	cmp	r6, r4
 8001aaa:	d109      	bne.n	8001ac0 <__libc_init_array+0x24>
 8001aac:	4d0b      	ldr	r5, [pc, #44]	; (8001adc <__libc_init_array+0x40>)
 8001aae:	4c0c      	ldr	r4, [pc, #48]	; (8001ae0 <__libc_init_array+0x44>)
 8001ab0:	f000 f818 	bl	8001ae4 <_init>
 8001ab4:	1b64      	subs	r4, r4, r5
 8001ab6:	10a4      	asrs	r4, r4, #2
 8001ab8:	2600      	movs	r6, #0
 8001aba:	42a6      	cmp	r6, r4
 8001abc:	d105      	bne.n	8001aca <__libc_init_array+0x2e>
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac4:	4798      	blx	r3
 8001ac6:	3601      	adds	r6, #1
 8001ac8:	e7ee      	b.n	8001aa8 <__libc_init_array+0xc>
 8001aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ace:	4798      	blx	r3
 8001ad0:	3601      	adds	r6, #1
 8001ad2:	e7f2      	b.n	8001aba <__libc_init_array+0x1e>
 8001ad4:	08001b1c 	.word	0x08001b1c
 8001ad8:	08001b1c 	.word	0x08001b1c
 8001adc:	08001b1c 	.word	0x08001b1c
 8001ae0:	08001b20 	.word	0x08001b20

08001ae4 <_init>:
 8001ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae6:	bf00      	nop
 8001ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aea:	bc08      	pop	{r3}
 8001aec:	469e      	mov	lr, r3
 8001aee:	4770      	bx	lr

08001af0 <_fini>:
 8001af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af2:	bf00      	nop
 8001af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001af6:	bc08      	pop	{r3}
 8001af8:	469e      	mov	lr, r3
 8001afa:	4770      	bx	lr
